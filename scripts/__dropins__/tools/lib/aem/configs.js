/*! Copyright 2025 Adobe
All Rights Reserved. */
import{d as f}from"../../chunks/cjs.js";let o=null,a=null,r=null;function C(){o=null,a=null,r=null}function u(){return new URL(`${window.location.origin}/config.json`)}function c(n,t){return t.split(".").reduce((e,i)=>{if(!Object.prototype.hasOwnProperty.call(e,i)){console.warn(`Property ${t} does not exist in the object`);return}return e[i]},n)}function m(n){const t=document.cookie.split(";");let e;return t.forEach(i=>{const[l,s]=i.trim().split("=");l===n&&(e=decodeURIComponent(s))}),e}function g(n=o){return n?Object.keys(n==null?void 0:n.public).sort((e,i)=>{const l=e.split("/").filter(Boolean).length;return i.split("/").filter(Boolean).length-l}).find(e=>window.location.pathname===e||window.location.pathname.startsWith(e))??"/":(console.warn("No config found. Please call initializeConfig() first."),"/")}function d(){return o?Object.keys(o.public).filter(n=>n!=="default"):(console.warn("No config found. Please call initializeConfig() first."),[])}function y(){return d().length>=1}function S(n){if(!r)throw new Error("Configuration not initialized. Call initializeConfig() first.");const t=r.headers??{};return{...t.all??{},...t[n]??{}}}function w(n,t){var i;const e=(i=n.public)==null?void 0:i.default;return t==="/"||!n.public[t]?e:f(e,n.public[t])}async function p(){try{const n=window.sessionStorage.getItem("config");if(!n)throw new Error("No config in session storage");const t=JSON.parse(n);if(!t[":expiry"]||t[":expiry"]<Math.round(Date.now()/1e3))throw new Error("Config expired");return t}catch{const t=await fetch(u());if(!t.ok)throw new Error("Failed to fetch config");const e=await t.json();return e[":expiry"]=Math.round(Date.now()/1e3)+7200,window.sessionStorage.setItem("config",JSON.stringify(e)),e}}async function z(){return o=await p(),a=g(o),r=w(o,a),r}function N(n){if(!r)throw new Error("Configuration not initialized. Call initializeConfig() first.");return c(r,n)}export{N as getConfigValue,m as getCookie,S as getHeaders,d as getListOfRootPaths,g as getRootPath,z as initializeConfig,y as isMultistore,C as resetConfig};
//# sourceMappingURL=configs.js.map

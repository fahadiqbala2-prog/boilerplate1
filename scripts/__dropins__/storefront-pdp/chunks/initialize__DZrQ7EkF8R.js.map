{"version":3,"file":"initialize__DZrQ7EkF8R.js","sources":["../../../ElsieSDK/packages/elsie/src/lib/initializer.ts","../../../ElsieSDK/packages/elsie/src/lib/config.ts","../../../ElsieSDK/packages/elsie/src/lib/image-params-keymap.ts","../../src/api/initialize/initialize.ts"],"sourcesContent":["import { Config, setImageParamsKeyMap } from '@adobe/elsie/lib';\n\ntype Listener = { off(): void };\n\ntype Listeners<T> = (config?: T) => Array<Listener | undefined>;\n\ntype Init<T> = (config?: T) => Promise<void>;\n\ntype Options<T> = { init: Init<T>; listeners: Listeners<T> };\n\nexport class Initializer<T> {\n  private _listeners: Listener[] = [];\n  listeners: Listeners<T>;\n  init: Init<T>;\n  config = new Config<T>({} as any);\n\n  constructor({ init, listeners }: Options<T>) {\n    this.listeners = (config) => {\n      // Unbind existing listeners\n      this._listeners.forEach((listener) => listener.off());\n      // Bind new listeners\n      return (this._listeners = listeners(config) as Listener[]);\n    };\n\n    this.init = (options) => {\n      const { imageParamsKeyMap, ...rest } = options as any;\n      this.config.setConfig({ ...this.config.getConfig(), ...rest });\n      setImageParamsKeyMap(imageParamsKeyMap);\n      return init(options);\n    };\n  }\n}\n\ntype Initializers = [Initializer<any>, { [key: string]: any } | undefined][];\n\nexport class initializers {\n  static _initializers: Initializers = [];\n  static _mounted: boolean = false;\n  static _imageParamsKeyMap: { [key: string]: string } | undefined = undefined;\n\n  static register(\n    initializer: Initializer<any>,\n    options?: { [key: string]: any }\n  ) {\n    if (initializers._mounted) {\n      initializer.listeners?.(options);\n      initializer.init?.(options);\n    }\n    initializers._initializers.push([initializer, options]);\n  }\n\n  static mount() {\n    initializers._mounted = true;\n    // In this specific order\n    // 1. Bind events\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.listeners?.(options);\n    });\n\n    // 2. Initialize APIs\n    initializers._initializers?.forEach(([initializer, options]) => {\n      initializer.init?.({\n        imageParamsKeyMap: initializers._imageParamsKeyMap,\n        ...options,\n      });\n    });\n  }\n\n  static setImageParamKeys(params: { [key: string]: any }) {\n    initializers._imageParamsKeyMap = params;\n  }\n}\n","export class Config<T> {\n  private config: T;\n\n  constructor(initialConfig: T) {\n    this.config = initialConfig;\n  }\n\n  getConfig(): T {\n    return this.config;\n  }\n\n  setConfig(newConfig: T): void {\n    this.config = newConfig;\n  }\n}\n","class ImageParamsKeyMap {\n  private _map?: { [key: string]: string } | undefined;\n\n  get map() {\n    return this._map;\n  }\n\n  set map(value: typeof this._map) {\n    this._map = value;\n  }\n\n  public getMethods() {\n    return {\n      setMap: (value: typeof this._map) => {\n        this.map = value;\n      },\n      getMap: () => this.map,\n    };\n  }\n}\n\nconst keyMap = new ImageParamsKeyMap();\n\nexport const { setMap: setImageParamsKeyMap, getMap: getImageParamsKeyMap } =\n  keyMap.getMethods();\n","import { Initializer } from '@adobe/elsie/lib';\nimport { Lang } from '@adobe/elsie/i18n';\nimport { ProductModel } from '@/pdp/data/models';\n\ntype ConfigProps = {\n  langDefinitions?: Lang;\n  defaultLocale?: string;\n  models?: {\n    [name: string]: {\n      initialData: any;\n      transform: (data?: ProductModel) => ProductModel;\n      fallbackData?: (parentProduct: any, simpleProduct: ProductModel) => ProductModel;\n    }\n  }\n};\n\nexport const initialize = new Initializer<ConfigProps>({\n  init: async (config) => {\n    const defaultConfig = { defaultLocale: 'en-US' };\n    initialize.config.setConfig({ ...defaultConfig, ...config });\n  },\n\n  listeners: () => [],\n});\n\nexport const config = initialize.config;\n"],"names":["Initializer","constructor","init","listeners","_listeners","config","Config","forEach","listener","off","options","imageParamsKeyMap","rest","setConfig","getConfig","setImageParamsKeyMap","initialConfig","newConfig","ImageParamsKeyMap","_map","map","value","getMethods","setMap","getMap","keyMap","getImageParamsKeyMap","initialize","defaultConfig","defaultLocale"],"mappings":";;;;;;AAUO,MAAMA,YAAe;AAAA,EAM1BC,YAAY;AAAA,IAAEC;AAAAA,IAAMC;AAAAA,EAAAA,GAAyB;AALrCC,sCAAyB,CAAA;AACjCD;AACAD;AACAG,kCAAS,IAAIC,OAAU,CAAA,CAAU;AAG/B,SAAKH,YAAaE,CAAWA,YAAA;AAE3B,WAAKD,WAAWG,QAASC,CAAaA,aAAAA,SAASC,KAAK;AAE5C,aAAA,KAAKL,aAAaD,UAAUE,OAAM;AAAA,IAAA;AAG5C,SAAKH,OAAQQ,CAAY,YAAA;AACjB,YAAA;AAAA,QAAEC;AAAAA,QAAmB,GAAGC;AAAAA,MAASF,IAAAA;AACvC,WAAKL,OAAOQ,UAAU;AAAA,QAAE,GAAG,KAAKR,OAAOS,UAAU;AAAA,QAAG,GAAGF;AAAAA,MAAAA,CAAM;AAC7DG,2BAAqBJ,iBAAiB;AACtC,aAAOT,KAAKQ,OAAO;AAAA,IAAA;AAAA,EAEvB;AACF;AC/BO,MAAMJ,OAAU;AAAA,EAGrBL,YAAYe,eAAkB;AAFtBX;AAGN,SAAKA,SAASW;AAAAA,EAChB;AAAA,EAEAF,YAAe;AACb,WAAO,KAAKT;AAAAA,EACd;AAAA,EAEAQ,UAAUI,WAAoB;AAC5B,SAAKZ,SAASY;AAAAA,EAChB;AACF;ACdA,MAAMC,kBAAkB;AAAA,EAAxB;AACUC;AAAAA;AAAAA,EAER,IAAIC,MAAM;AACR,WAAO,KAAKD;AAAAA,EACd;AAAA,EAEA,IAAIC,IAAIC,OAAyB;AAC/B,SAAKF,OAAOE;AAAAA,EACd;AAAA,EAEOC,aAAa;AACX,WAAA;AAAA,MACLC,QAAQA,CAACF,UAA4B;AACnC,aAAKD,MAAMC;AAAAA,MACb;AAAA,MACAG,QAAQA,MAAM,KAAKJ;AAAAA,IAAAA;AAAAA,EAEvB;AACF;AAEA,MAAMK,SAAS,IAAIP;AAEN,MAAA;AAAA,EAAEK,QAAQR;AAAAA,EAAsBS,QAAQE;AAAqB,IACxED,OAAOH,WAAW;ACRPK,MAAAA,aAAa,IAAI3B,YAAyB;AAAA,EACrDE,MAAM,OAAOG,YAAW;AACtB,UAAMuB,gBAAgB;AAAA,MAAEC,eAAe;AAAA,IAAA;AACvCF,eAAWtB,OAAOQ,UAAU;AAAA,MAAE,GAAGe;AAAAA,MAAe,GAAGvB;AAAAA,IAAAA,CAAQ;AAAA,EAC7D;AAAA,EAEAF,WAAWA,MAAM,CAAA;AACnB,CAAC;AAEM,MAAME,SAASsB,WAAWtB;"}
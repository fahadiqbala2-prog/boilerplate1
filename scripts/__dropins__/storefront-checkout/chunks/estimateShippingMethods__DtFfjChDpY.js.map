{"version":3,"file":"estimateShippingMethods__DtFfjChDpY.js","sources":["../../src/data/models/address-form.ts","../../src/data/transforms/transform-regions.ts","../../src/api/getRegions/graphql/getRegions.graphql.ts","../../src/api/getRegions/getRegions.ts","../../src/components/AddressForm/constants.ts","../../src/utils/getMultilineValues/getMultilineValues.ts","../../src/api/estimateShippingMethods/graphql/estimateShippingMethods.graphql.ts","../../src/api/estimateShippingMethods/estimateShippingMethods.ts"],"sourcesContent":["enum AddressFormTypes {\n  SHIPPING = 'shipping_addresses',\n  BILLING = 'billing_address',\n}\n\nenum AddressFormFields {\n  City = 'city',\n  Company = 'company',\n  Country = 'country_id',\n  FirstName = 'firstname',\n  LastName = 'lastname',\n  PostCode = 'postcode',\n  Region = 'region',\n  RegionId = 'region_id',\n  SaveInAddressBook = 'save_in_address_book',\n  Street = 'street',\n  Telephone = 'telephone',\n  Vat = 'vat_id',\n}\n\ntype AddressFormValues = Record<string, string>;\ntype AddressFormErrors = Record<string, string>;\n\nexport {\n  AddressFormValues,\n  AddressFormErrors,\n  AddressFormFields,\n  AddressFormTypes,\n};\n","import { GetRegionsQuery } from '@/checkout/__generated__/types';\nimport { Region as RegionModel } from '@/checkout/data/models/region';\n\ntype RegionsCountry = NonNullable<GetRegionsQuery['country']>;\ntype AvailableRegions = RegionsCountry['available_regions'];\ntype NonNullableRegions = NonNullable<AvailableRegions>;\ntype AvailableRegion = NonNullableRegions[number];\ntype NonNullableAvailableRegion = NonNullable<AvailableRegion>;\ntype ValidatedAvailableRegion = {\n  code: NonNullable<NonNullableAvailableRegion['code']>;\n  id: NonNullable<NonNullableAvailableRegion['id']>;\n  name: NonNullable<NonNullableAvailableRegion['name']>;\n};\n\nconst isValid = (region: AvailableRegion): boolean => {\n  if (!region) return false;\n  return !!region.id && !!region.code && !!region.name;\n};\n\nconst transformRegions = (\n  data: RegionsCountry['available_regions']\n): RegionModel[] | undefined => {\n  if (!data) return;\n\n  return data.filter(isValid).map((region) => {\n    const { id, code, name } = region as ValidatedAvailableRegion;\n    return { id, code, name };\n  });\n};\n\nexport { AvailableRegions, transformRegions };\n","export const getRegionsQuery = /* GraphQL */`\nquery getRegions($countryCode: String!) {\n    country(id: $countryCode) {\n        id\n        available_regions {\n            id\n            code\n            name\n        }\n    }\n}`;","import { regionsSignal } from '@/checkout/signals';\nimport { getRegionsQuery } from './graphql/getRegions.graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformRegions } from '@/checkout/data/transforms/transform-regions';\nimport { Region as RegionModel } from '@/checkout/data/models/region';\nimport { AddressFormTypes } from '@/checkout/data/models';\n\nexport const getRegions = async (\n  countryCode: string,\n  addressType: AddressFormTypes\n): Promise<RegionModel[] | undefined> => {\n  regionsSignal.value.addressType = addressType;\n\n  return dispatchApiCall({\n    type: 'query',\n    query: getRegionsQuery,\n    options: { variables: { countryCode } },\n    path: 'country.available_regions',\n    signalType: 'regions',\n    transformer: transformRegions,\n  });\n};\n","export const MULTILINE_SUFFIX = '-';\nexport const MULTILINE_CUSTOM_ATTR_SPLIT = '\\n';\nexport const DEBOUNCE_TIME = 2000;\n","import { MULTILINE_SUFFIX } from '@/checkout/components/AddressForm/constants';\n\nconst getMultilineValues = (code: string, records: Record<string, string>) => {\n  return Object.keys(records)\n    .filter((key) => key.startsWith(code))\n    .sort(\n      (a, b) =>\n        parseInt(a.replace(`${code}${MULTILINE_SUFFIX}`, ''), 10) -\n        parseInt(b.replace(`${code}${MULTILINE_SUFFIX}`, ''), 10)\n    )\n    .map((key) => records[key]);\n};\n\nexport { getMultilineValues };\n","export const estimateShippingMethodsMutation = /* GraphQL */ `\nmutation estimateShippingMethods(\n\t$cartId: String!\n  $address: EstimateAddressInput!\n) {\n\testimateShippingMethods(\n\t\tinput: {\n\t\t\tcart_id: $cartId\n\t\t\taddress: $address\n\t\t}\n\t) {\n\t\tcarrier_title\n\t\tcarrier_code\n\t\tmethod_title\n\t\tmethod_code\n\t\tavailable\n\t\tamount {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\tprice_excl_tax {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\tprice_incl_tax {\n\t\t\tcurrency\n\t\t\tvalue\n\t\t}\n\t\terror_message\n\t}\n}\n`;\n","import { MissingCart, MissingCountry } from '@/checkout/api';\nimport { estimateShippingMethodsMutation } from '@/checkout/api/estimateShippingMethods/graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { ShippingMethod } from '@/checkout/data/models';\nimport { transformShippingMethods } from '@/checkout/data/transforms';\n\nexport interface ShippingEstimationCriteria {\n  country_code: string;\n  region_name?: string;\n  region_id?: string | number;\n  zip?: string;\n}\n\nexport type EstimateShippingInput = {\n  cartId: string;\n  criteria: ShippingEstimationCriteria;\n};\n\nexport const estimateShippingMethods = async (\n  input: EstimateShippingInput\n): Promise<ShippingMethod[] | undefined> => {\n  const { cartId, criteria } = input || {};\n  const { country_code, region_id, region_name, zip } =\n    criteria || {};\n\n  if (!cartId) throw new MissingCart();\n  if (!country_code) throw new MissingCountry();\n  \n  const regionId = (typeof region_id === 'string') ? parseInt(region_id, 10) : region_id;\n  const region = (region_id || region_name) ? {\n    ...(regionId && { region_id: regionId }),\n    ...(region_name && { region_code: region_name }),\n  } : undefined;\n\n  const address = {\n    country_code,\n    ...(zip && { postcode: zip }),\n    ...(region && { region })\n  };\n    \n  return await dispatchApiCall({\n    type: 'mutation',\n    query: estimateShippingMethodsMutation,\n    options: { variables: { cartId, address } },\n    path: 'estimateShippingMethods',\n    signalType: 'estimateShippingMethods',\n    transformer: transformShippingMethods,\n  });\n};\n"],"names":["AddressFormTypes","SHIPPING","BILLING","AddressFormFields","City","Company","Country","FirstName","LastName","PostCode","Region","RegionId","SaveInAddressBook","Street","Telephone","Vat","isValid","region","id","code","name","transformRegions","data","filter","map","getRegionsQuery","getRegions","countryCode","addressType","regionsSignal","value","dispatchApiCall","type","query","options","variables","path","signalType","transformer","MULTILINE_SUFFIX","MULTILINE_CUSTOM_ATTR_SPLIT","DEBOUNCE_TIME","getMultilineValues","records","Object","keys","key","startsWith","sort","a","b","parseInt","replace","estimateShippingMethodsMutation","estimateShippingMethods","input","cartId","criteria","country_code","region_id","region_name","zip","MissingCart","MissingCountry","regionId","region_code","undefined","address","postcode","transformShippingMethods"],"mappings":"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"}
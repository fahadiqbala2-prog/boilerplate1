{"version":3,"file":"transform-shipping-methods__Jr5_k8qEf1.js","sources":["../../src/api/errors/errors.ts","../../src/signals/CartSignal.ts","../../src/signals/EstimateShippingMethodsSignal.ts","../../src/signals/RegionsSignal.ts","../../src/api/utils/enqueueRequest.ts","../../src/api/utils/filterControlledErrors.ts","../../src/api/utils/dispatchApiCall.ts","../../src/data/transforms/transform-shipping-methods.ts"],"sourcesContent":["import { FetchQueryError } from '@adobe/fetch-graphql';\n\nexport class FetchError extends Error {\n  constructor(reasons: FetchQueryError) {\n    super(reasons.map((e: any) => e.message).join(' '));\n    this.name = 'FetchError';\n  }\n}\n\nexport class InvalidArgument extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'InvalidArgument';\n  }\n}\n\nexport class UnexpectedError extends Error {\n  constructor(message: string) {\n    super(message);\n    this.name = 'UnexpectedError';\n  }\n}\n\nexport class MissingCart extends InvalidArgument {\n  constructor() {\n    super('Cart ID is required');\n  }\n}\nexport class MissingEmail extends InvalidArgument {\n  constructor() {\n    super('Email is required');\n  }\n}\n\nexport class MissingPaymentMethod extends InvalidArgument {\n  constructor() {\n    super('Payment method code is required');\n  }\n}\n\nexport class MissingBillingAddress extends InvalidArgument {\n  constructor() {\n    super('Billing address is required');\n  }\n}\n\nexport class MissingCountry extends InvalidArgument {\n  constructor() {\n    super('Country Code is required');\n  }\n}\n","import { Cart } from '@/checkout/data/models';\nimport { signal } from '@preact/signals';\n\nexport const cartSignal = signal<{\n  pending: boolean;\n  data?: Cart;\n}>({ pending: false, data: undefined });\n","import { signal } from '@preact/signals';\nimport { ShippingMethod } from '@/checkout/data/models';\n\nexport const estimateShippingMethodsSignal = signal<{\n  pending: boolean;\n  data?: ShippingMethod[];\n}>({ pending: false, data: undefined });\n","import { AddressFormTypes } from '@/checkout/data/models';\nimport { Region as RegionModel } from '@/checkout/data/models/region';\nimport { signal } from '@preact/signals';\n\nexport const regionsSignal = signal<{\n  addressType?: AddressFormTypes;\n  country?: string;\n  selectedRegion?: string;\n  selectedRegionId?: string;\n  pending: boolean;\n  data?: RegionModel[];\n}>({ pending: false, data: undefined });\n","const requestsQueue: (() => Promise<any>)[] = [];\n\nexport function enqueueRequest<T>(requestFn: () => Promise<T>): Promise<T> {\n  return new Promise((resolve, reject) => {\n    requestsQueue.push(requestFn);\n\n    const waitForTurnAndSendRequest = () => {\n      if (requestsQueue[0] === requestFn) {\n        requestFn()\n          .then(resolve)\n          .catch(reject)\n          .finally(() => requestsQueue.shift());\n      } else {\n        setTimeout(waitForTurnAndSendRequest, 100);\n      }\n    };\n\n    waitForTurnAndSendRequest();\n  });\n}\n","import { FetchQueryError } from '@adobe/fetch-graphql';\n\ntype ErrorPath = (string | number)[];\n\nexport type ErrorWithPath = FetchQueryError[number] & {\n  path?: ErrorPath;\n};\n\nconst controlledErrorProps: string[] = ['sender_email', 'recipient_email'];\n\n/**\n * Filters out errors with known paths from a list of errors generated by a GraphQL query.\n *\n * Known issue: The query does not differentiate between physical and virtual gift cards, leading\n * to errors for physical ones as they don't have 'sender_email' and 'recipient_email' properties.\n *\n * @param {ErrorWithPath[]} errors - Array of errors to be filtered.\n * @return {ErrorWithPath[]} Uncontrolled (unexpected) errors not matching predefined paths.\n */\n\nexport function filterControlledErrors(errors: ErrorWithPath[]) {\n  return errors.filter(\n    (error) =>\n      !error.path ||\n      !controlledErrorProps.some((controlledErrorProp) => {\n        return error.path?.at(-1) === controlledErrorProp;\n      })\n  );\n}\n","import { FetchError, fetchGraphQl } from '@/checkout/api';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport {\n  cartSignal,\n  regionsSignal,\n  estimateShippingMethodsSignal,\n} from '@/checkout/signals';\n\nimport { FetchOptions, FetchQueryError } from '@adobe/fetch-graphql';\nimport { enqueueRequest } from '@/checkout/api/utils/enqueueRequest';\nimport { filterControlledErrors } from '@/checkout/api/utils/filterControlledErrors';\n\nconst signalTypes = {\n  cart: cartSignal,\n  regions: regionsSignal,\n  estimateShippingMethods: estimateShippingMethodsSignal,\n};\n\ntype SignalTypesType = typeof signalTypes;\ntype SignalTypesKeys = keyof SignalTypesType;\ntype SignalDataMap = {\n  [K in SignalTypesKeys]: SignalTypesType[K]['value']['data'];\n};\ntype DispatchApiCallParams<T extends SignalTypesKeys> = {\n  type: 'query' | 'mutation';\n  query: string;\n  options?: FetchOptions;\n  path: string;\n  signalType: T;\n  transformer?: (data: any) => SignalDataMap[T];\n};\n\nexport function getValueAtPath(obj: any, path: string) {\n  return path\n    .split('.')\n    .reduce(\n      (acc, part) => (acc && acc[part] !== undefined ? acc[part] : undefined),\n      obj\n    );\n}\n\nconst latestCall: Record<SignalTypesKeys, Symbol | null> = {\n  cart: null,\n  regions: null,\n  estimateShippingMethods: null,\n};\n\nasync function dispatchApiCall<T extends SignalTypesKeys>(\n  params: DispatchApiCallParams<T>\n): Promise<SignalDataMap[T]> {\n  const { query, options, path, signalType, type, transformer } = params;\n  const signal = signalTypes[signalType];\n  const currentCall = Symbol();\n\n  latestCall[signalType] = currentCall;\n\n  signal.value = { ...signal.value, pending: true };\n\n  try {\n    const { data, errors } = await (type === 'mutation'\n      ? enqueueRequest(() =>\n          fetchGraphQl(query, options).catch(handleNetworkError)\n        )\n      : fetchGraphQl(query, {\n          method: 'GET',\n          cache: 'no-cache',\n          ...options,\n        }).catch(handleNetworkError));\n\n    if (errors) {\n      const uncontrolledErrors = filterControlledErrors(errors);\n\n      if (uncontrolledErrors.length > 0) {\n        throw new FetchError(uncontrolledErrors as FetchQueryError);\n      }\n    }\n\n    let result = getValueAtPath(data, path);\n    if (result === undefined) throw new Error(`No data found at path: ${path}`);\n    if (transformer) result = transformer(result);\n\n    signal.value = { ...signal.value, data: result };\n\n    // to avoid flickering of the pending state when there are multiple sequential calls\n    setTimeout(() => {\n      signal.value = {\n        ...signal.value,\n        pending:\n          latestCall[signalType] === currentCall ? false : signal.value.pending,\n      };\n    }, 0);\n\n    return result;\n  } catch (error: any) {\n    if (error.name === 'AbortError') return;\n    signal.value = { ...signal.value, pending: false };\n    throw error;\n  }\n}\n\nexport { dispatchApiCall };\n","import { ShippingMethod } from '@/checkout/data/models/shipping-method';\nimport { GetCheckoutDataQuery } from '@/checkout/__generated__/types';\nimport { isNullish } from '@/checkout/utils/isNullish';\n\ntype Cart = NonNullable<GetCheckoutDataQuery['cart']>;\ntype ShippingAddresses = Cart['shipping_addresses'];\ntype ShippingAddress = NonNullable<NonNullable<ShippingAddresses>[number]>;\ntype AvailableShippingMethods = ShippingAddress['available_shipping_methods'];\ntype AvailableShippingMethod = NonNullable<AvailableShippingMethods>[number];\ntype SelectedShippingMethod = ShippingAddress['selected_shipping_method'];\n\ntype FilteredShippingMethod = Omit<\n  NonNullable<AvailableShippingMethod>,\n  'method_code' | 'method_title' | 'amount'\n> & {\n  method_code: string;\n  method_title: string;\n  amount: {\n    value: number;\n    currency: string;\n  };\n};\n\nconst byPrice = (a: ShippingMethod, b: ShippingMethod) =>\n  a.amount.value - b.amount.value;\n\nconst isValid = (method: AvailableShippingMethod | SelectedShippingMethod) => {\n  if (!method) return false;\n  if (!method.method_code || !method.method_title) return false;\n  if (isNullish(method.amount.value) || !method.amount.currency) return false;\n  return true;\n};\n\nconst buildShippingMethod = (data: FilteredShippingMethod): ShippingMethod => {\n  return {\n    amount: {\n      value: data.amount.value,\n      currency: data.amount.currency,\n    },\n    title: data.method_title,\n    code: data.method_code,\n    carrier: {\n      code: data.carrier_code,\n      title: data.carrier_title,\n    },\n    value: `${data.carrier_code} - ${data.method_code}`,\n  };\n};\n\nexport const transformSelectedShippingMethod = (\n  data: SelectedShippingMethod\n): ShippingMethod | undefined => {\n  if (!isValid(data)) return;\n  return buildShippingMethod(data as FilteredShippingMethod);\n};\n\nexport const transformAvailableShippingMethod = (\n  data: AvailableShippingMethod\n): ShippingMethod | undefined => {\n  if (!isValid(data)) return;\n  return buildShippingMethod(data as FilteredShippingMethod);\n};\n\nexport const transformShippingMethods = (\n  data: AvailableShippingMethods\n): ShippingMethod[] | undefined => {\n  if (!data) return;\n\n  return data\n    .filter(isValid)\n    .map((method) => buildShippingMethod(method as FilteredShippingMethod))\n    .sort(byPrice);\n};\n"],"names":["FetchError","Error","constructor","reasons","map","e","message","join","name","InvalidArgument","UnexpectedError","MissingCart","MissingEmail","MissingPaymentMethod","MissingBillingAddress","MissingCountry","cartSignal","signal","pending","data","undefined","estimateShippingMethodsSignal","regionsSignal","requestsQueue","enqueueRequest","requestFn","Promise","resolve","reject","push","waitForTurnAndSendRequest","then","catch","finally","shift","setTimeout","controlledErrorProps","filterControlledErrors","errors","filter","error","path","some","controlledErrorProp","at","signalTypes","cart","regions","estimateShippingMethods","getValueAtPath","obj","split","reduce","acc","part","latestCall","dispatchApiCall","params","query","options","signalType","type","transformer","currentCall","Symbol","value","fetchGraphQl","handleNetworkError","method","cache","uncontrolledErrors","length","result","byPrice","a","b","amount","isValid","method_code","method_title","isNullish","currency","buildShippingMethod","title","code","carrier","carrier_code","carrier_title","transformSelectedShippingMethod","transformShippingMethods","sort"],"mappings":"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"}
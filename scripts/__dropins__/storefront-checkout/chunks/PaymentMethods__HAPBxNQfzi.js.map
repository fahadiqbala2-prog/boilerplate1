{"version":3,"file":"PaymentMethods__HAPBxNQfzi.js","sources":["../../../ElsieSDK/packages/elsie/src/icons/Wallet.svg","../../src/components/PaymentMethods/PaymentMethods.tsx","../../src/components/PaymentMethods/PaymentMethodsSkeleton.tsx","../../src/components/ToggleButton/ToggleButton.tsx","../../src/containers/PaymentMethods/defaultHandlers.tsx","../../src/containers/PaymentMethods/PaymentMethods.tsx"],"sourcesContent":["import * as React from \"react\";\nconst SvgWallet = (props) => /* @__PURE__ */ React.createElement(\"svg\", { width: 24, height: 24, viewBox: \"0 0 24 24\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props }, /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M17.93 14.8V18.75H5.97C4.75 18.75 3.75 17.97 3.75 17V6.5M3.75 6.5C3.75 5.53 4.74 4.75 5.97 4.75H15.94V8.25H5.97C4.75 8.25 3.75 7.47 3.75 6.5Z\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M19.35 11.64H14.04V14.81H19.35V11.64Z\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }), /* @__PURE__ */ React.createElement(\"path\", { vectorEffect: \"non-scaling-stroke\", d: \"M17.9304 11.64V8.25H15.1504\", stroke: \"currentColor\", strokeWidth: 1, strokeLinecap: \"round\", strokeLinejoin: \"round\" }));\nexport default SvgWallet;\n","import { Heading, ToggleButton } from '@/checkout/components';\nimport { PaymentMethodsSkeleton } from '@/checkout/components/PaymentMethods';\nimport '@/checkout/components/PaymentMethods/PaymentMethods.css';\nimport { PaymentMethod } from '@/checkout/data/models/payment-method';\nimport {\n  Icon,\n  IllustratedMessage,\n  ProgressSpinner,\n} from '@adobe/elsie/components';\nimport { useText } from '@adobe/elsie/i18n';\nimport { Wallet } from '@adobe/elsie/icons';\nimport { classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nexport interface PaymentMethodsProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange'> {\n  paymentMethodContent?: VNode;\n  isLoading?: boolean;\n  onChange?: (value: string) => void;\n  options?: PaymentMethod[];\n  selection?: string;\n}\n\ninterface PaymentOptionProps {\n  code: string;\n  isLoading?: boolean;\n  isSelected: boolean;\n  onChange: (value: string) => void;\n  title: string;\n}\n\nconst PaymentOption: FunctionComponent<PaymentOptionProps> = ({\n  code,\n  isLoading,\n  isSelected,\n  onChange,\n  title,\n}) => {\n  return (\n    <ToggleButton\n      className=\"checkout-payment-methods__method\"\n      label={title}\n      name=\"payment-method\"\n      value={code}\n      selected={isSelected}\n      onChange={onChange}\n      radioButtonProps={{\n        'aria-busy': isLoading,\n      }}\n      // TODO: Add icon\n    />\n  );\n};\n\nexport const PaymentMethods: FunctionComponent<PaymentMethodsProps> = ({\n  className,\n  paymentMethodContent,\n  isLoading,\n  onChange = () => {},\n  options,\n  selection,\n}) => {\n  const dictionary = useText({\n    Title: 'Checkout.PaymentMethods.title',\n    EmptyState: 'Checkout.PaymentMethods.emptyState',\n  });\n\n  if (options === undefined) return <PaymentMethodsSkeleton />;\n\n  return (\n    <div className={classes(['checkout-payment-methods', className])}>\n      <Heading level={2} className=\"checkout-payment-methods__title\">\n        {dictionary.Title}\n      </Heading>\n\n      {!isLoading && options!.length === 0 && (\n        <IllustratedMessage\n          icon={<Icon source={Wallet} />}\n          message={<p>{dictionary.EmptyState}</p>}\n        />\n      )}\n\n      <div className={classes(['checkout-payment-methods__wrapper'])}>\n        {isLoading && (\n          <ProgressSpinner className=\"checkout-payment-methods__spinner\" />\n        )}\n\n        <div\n          className={classes([\n            'checkout-payment-methods__methods',\n            ['checkout-payment-methods--loading', isLoading],\n            ['checkout-payment-methods--full-width', options!.length % 2 !== 0],\n          ])}\n        >\n          {options?.map((method) => (\n            <PaymentOption\n              code={method.code}\n              key={method.code}\n              onChange={onChange}\n              isSelected={method.code === selection}\n              title={method.title}\n            />\n          ))}\n        </div>\n\n        {paymentMethodContent && (\n          <div className=\"checkout-payment-methods__content\">\n            {paymentMethodContent}\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const PaymentMethodsSkeleton: FunctionComponent = () => {\n  return (\n    <Skeleton data-testid=\"payment-methods-skeleton\">\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n      <SkeletonRow size=\"xlarge\" fullWidth={true} />\n    </Skeleton>\n  );\n};\n","import { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/ToggleButton/ToggleButton.css';\nimport { RadioButton } from '@adobe/elsie/components';\n\nexport interface ToggleButtonProps\n  extends Omit<HTMLAttributes<HTMLDivElement>, 'onChange' | 'icon'> {\n  label: string;\n  name: string;\n  value: string;\n  selected: boolean;\n  onChange: (value: string) => void;\n  icon?:\n    | VNode<HTMLAttributes<SVGSVGElement>>\n    | VNode<HTMLAttributes<HTMLImageElement>>;\n  radioButtonProps?: Omit<\n    HTMLAttributes<HTMLInputElement>,\n    'size' | 'label' | 'name' | 'value' | 'checked' | 'disabled'\n  >;\n}\n\nexport const ToggleButton: FunctionComponent<ToggleButtonProps> = ({\n  label,\n  name,\n  value,\n  icon,\n  selected,\n  onChange,\n  className,\n  children,\n  radioButtonProps,\n  ...props\n}) => {\n  return (\n    <div\n      className={classes([\n        'checkout-toggle-button',\n        className,\n        ['checkout-toggle-button__selected', selected],\n      ])}\n      {...props}\n    >\n      <label className=\"checkout-toggle-button__actionButton\">\n        <RadioButton\n          {...radioButtonProps}\n          label=\"\"\n          name={name}\n          value={value}\n          checked={selected}\n          onChange={() => onChange(value)}\n          aria-label={label}\n          className={classes([\n            className,\n            'checkout-toggle-button__radioButton',\n          ])}\n        />\n\n        <div className=\"checkout-toggle-button__content\">\n          {icon && (\n            <icon.type\n              {...icon?.props}\n              className=\"checkout-toggle-button__icon\"\n            />\n          )}\n\n          {label}\n        </div>\n      </label>\n    </div>\n  );\n};\n","import { SlotProps } from '@adobe/elsie/lib';\nimport { PaymentMethodContentSlotContext } from '.';\n\nexport interface PaymentMethodHandler {\n  render: SlotProps<PaymentMethodContentSlotContext>;\n}\n\nexport interface PaymentMethodHandlers {\n  [code: string]: PaymentMethodHandler;\n}\n\nexport const defaultHandlers: PaymentMethodHandlers = {\n  free: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n  checkmo: {\n    render: (context) => {\n      const $content = document.createElement('div');\n      $content.innerText = '';\n      context.replaceHTML($content);\n    },\n  },\n};\n","import { setPaymentMethod as setPaymentMethodOnCart } from '@/checkout/api';\nimport { PaymentMethods as PaymentMethodsComponent } from '@/checkout/components/PaymentMethods/PaymentMethods';\nimport {\n  PaymentMethodHandler,\n  defaultHandlers,\n} from '@/checkout/containers/PaymentMethods/defaultHandlers';\nimport { cartSignal } from '@/checkout/signals';\nimport { Container, Slot, SlotProps } from '@adobe/elsie/lib';\nimport {\n  HTMLAttributes,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'preact/compat';\n\nexport interface PaymentMethodSlotContext {\n  addPaymentMethodHandler: (\n    code: string,\n    handler: { render: SlotProps<PaymentMethodContentSlotContext> }\n  ) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodContentSlotContext {\n  cartId: string;\n  onPlaceOrder: (fn: () => void) => void;\n  handleServerError: (error: any) => void;\n  replaceHTML: (domElement: HTMLElement) => void;\n}\n\nexport interface PaymentMethodsProps extends HTMLAttributes<HTMLDivElement> {\n  paymentMethodsSlot?: SlotProps<PaymentMethodSlotContext>;\n  onPlaceOrder: (fn: () => void) => void;\n  handleServerError: (error: any) => void;\n  isShippingInfoRequired?: boolean;\n}\n\nfunction usePaymentMethods(props: PaymentMethodsProps) {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  } = props;\n\n  const prevPaymentMethodSent = useRef<string>();\n\n  const [selectedPaymentMethod, setSelectedPaymentMethod] = useState<\n    string | undefined\n  >();\n  const [temporarySelectedPaymentMethod, setTemporarySelectedPaymentMethod] =\n    useState<string | undefined>();\n\n  const [paymentMethodHandlers, setPaymentMethodHandlers] =\n    useState(defaultHandlers);\n\n  const [isDefaultContentUsed, setIsDefaultContentUsed] = useState(true);\n\n  const { data: cartData } = cartSignal.value;\n  const cartId = cartData?.id ?? '';\n  const hasCartData = !!cartData;\n  const hasAddress = !!cartData?.shippingAddresses?.[0];\n  const availablePaymentMethods = cartData?.availablePaymentMethods;\n  const cartSelectedPaymentMethod = cartData?.selectedPaymentMethod;\n\n  const setAndSelectPaymentMethod = useCallback(\n    async (paymentMethod: string) => {\n      try {\n        setSelectedPaymentMethod(paymentMethod);\n\n        if (!hasAddress && isShippingInfoRequired) return;\n\n        const paymentMethodToSend = paymentMethod;\n        if (paymentMethodToSend === prevPaymentMethodSent.current) return;\n        prevPaymentMethodSent.current = paymentMethodToSend;\n\n        await setPaymentMethodOnCart({ cartId, paymentMethod });\n      } catch (error: any) {\n        console.error('setting payment method failed:', error);\n      }\n    },\n    [cartId, hasAddress, isShippingInfoRequired]\n  );\n\n  useEffect(() => {\n    if (!hasCartData) return;\n\n    if (cartSelectedPaymentMethod?.code) {\n      const selectedPaymentMethodIsAvailable = availablePaymentMethods?.some(\n        (method: any) => method.code === cartSelectedPaymentMethod.code\n      );\n\n      if (selectedPaymentMethodIsAvailable) {\n        // select the method from the backend\n        setSelectedPaymentMethod(cartSelectedPaymentMethod.code);\n      } else if (availablePaymentMethods?.length) {\n        // select the first available method\n        setAndSelectPaymentMethod(availablePaymentMethods[0]!.code);\n      } else {\n        setSelectedPaymentMethod(undefined);\n      }\n    } else {\n      // default to the temporarily selected one or the first one\n      availablePaymentMethods![0] &&\n        setAndSelectPaymentMethod(\n          temporarySelectedPaymentMethod || availablePaymentMethods![0].code\n        );\n    }\n  }, [\n    availablePaymentMethods,\n    hasCartData,\n    cartSelectedPaymentMethod,\n    setAndSelectPaymentMethod,\n    temporarySelectedPaymentMethod,\n  ]);\n\n  const onPaymentMethodChange = async (value: string) => {\n    await setAndSelectPaymentMethod(value);\n    if (!cartSelectedPaymentMethod?.code) {\n      setTemporarySelectedPaymentMethod(value);\n    }\n  };\n\n  const addPaymentMethodHandler = useCallback(\n    (code: string, handler: PaymentMethodHandler) => {\n      if (!code) {\n        console.warn(\n          'Payment method handler is ignored because it has no code'\n        );\n        return;\n      }\n\n      if (!handler) {\n        console.warn('Payment method handler is ignored because it is empty');\n        return;\n      }\n\n      setPaymentMethodHandlers((prevHandlers) => ({\n        ...prevHandlers,\n        [code]: handler,\n      }));\n    },\n    []\n  );\n\n  // Run the main payment method container slot callback\n  const mainSlotContent = paymentMethodsSlot ? (\n    <Slot\n      name=\"PaymentMethods\"\n      slot={paymentMethodsSlot}\n      context={{\n        addPaymentMethodHandler,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n          setIsDefaultContentUsed(false);\n        },\n      }}\n    />\n  ) : null;\n\n  const selectedPaymentMethodHandler = selectedPaymentMethod\n    ? paymentMethodHandlers[selectedPaymentMethod]\n    : null;\n\n  const paymentMethodContent = selectedPaymentMethodHandler ? (\n    <Slot\n      key={selectedPaymentMethodHandler}\n      name=\"PaymentMethodContent\"\n      slot={selectedPaymentMethodHandler.render}\n      context={{\n        cartId,\n        onPlaceOrder,\n        handleServerError,\n        replaceHTML(domElement) {\n          this.replaceWith(domElement);\n        },\n      }}\n    />\n  ) : undefined;\n\n  useEffect(() => {\n    // Content has been replaced but payment method handlers have been added\n    if (!isDefaultContentUsed && paymentMethodHandlers != defaultHandlers) {\n      console.warn(\n        'Payment method handlers you have added are ignored because the default content has been replaced'\n      );\n    }\n  }, [isDefaultContentUsed, paymentMethodHandlers]);\n\n  return {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  };\n}\n\nexport const PaymentMethods: Container<PaymentMethodsProps> = (props) => {\n  const {\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired = true,\n  } = props;\n  const {\n    availablePaymentMethods,\n    selectedPaymentMethod,\n    onPaymentMethodChange,\n    paymentMethodContent,\n    mainSlotContent,\n    isDefaultContentUsed,\n  } = usePaymentMethods({\n    onPlaceOrder,\n    handleServerError,\n    paymentMethodsSlot,\n    isShippingInfoRequired,\n  });\n\n  return (\n    <>\n      {mainSlotContent && (\n        // @ts-ignore\n        <mainSlotContent.type\n          ref={mainSlotContent.ref}\n          {...mainSlotContent.props}\n        />\n      )}\n      {isDefaultContentUsed && (\n        <PaymentMethodsComponent\n          options={availablePaymentMethods}\n          selection={selectedPaymentMethod}\n          onChange={onPaymentMethodChange}\n          paymentMethodContent={paymentMethodContent}\n          isLoading={cartSignal.value.pending}\n        />\n      )}\n    </>\n  );\n};\n"],"names":["PaymentOption","code","isLoading","isSelected","onChange","title","_jsx","ToggleButton","className","label","name","value","selected","radioButtonProps","PaymentMethods","paymentMethodContent","options","selection","dictionary","useText","Title","EmptyState","undefined","PaymentMethodsSkeleton","_jsxs","classes","children","Heading","level","length","IllustratedMessage","icon","Icon","source","Wallet","message","ProgressSpinner","map","method","Skeleton","SkeletonRow","variant","size","fullWidth","props","RadioButton","checked","type","defaultHandlers","free","render","context","$content","document","createElement","innerText","replaceHTML","checkmo","usePaymentMethods","onPlaceOrder","handleServerError","paymentMethodsSlot","isShippingInfoRequired","prevPaymentMethodSent","useRef","selectedPaymentMethod","setSelectedPaymentMethod","useState","temporarySelectedPaymentMethod","setTemporarySelectedPaymentMethod","paymentMethodHandlers","setPaymentMethodHandlers","isDefaultContentUsed","setIsDefaultContentUsed","data","cartData","cartSignal","cartId","id","hasCartData","hasAddress","shippingAddresses","availablePaymentMethods","cartSelectedPaymentMethod","setAndSelectPaymentMethod","useCallback","paymentMethod","paymentMethodToSend","current","setPaymentMethodOnCart","error","useEffect","selectedPaymentMethodIsAvailable","some","onPaymentMethodChange","addPaymentMethodHandler","handler","console","warn","prevHandlers","mainSlotContent","Slot","slot","domElement","replaceWith","selectedPaymentMethodHandler","_Fragment","ref","PaymentMethodsComponent","pending"],"mappings":"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"}
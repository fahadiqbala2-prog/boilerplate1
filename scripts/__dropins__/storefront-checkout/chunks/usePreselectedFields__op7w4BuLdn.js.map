{"version":3,"file":"usePreselectedFields__op7w4BuLdn.js","sources":["../../../ElsieSDK/packages/elsie/src/lib/form-values.ts","../../src/utils/autocompleteFieldCodes/autocompleteFieldCodes.ts","../../src/utils/isEmpty/isEmpty.ts","../../src/utils/processFormFields/processFormFields.ts","../../src/utils/refetchEstimatedShippingMethods/refetchEstimatedShippingMethods.ts","../../src/hooks/useBreakpoint/useBreakpoint.ts","../../src/components/Checkout/Checkout.tsx","../../src/components/FieldsForm/fieldFactory.tsx","../../src/components/FieldsForm/validation.ts","../../src/components/FieldsForm/FieldsForm.tsx","../../src/components/FieldsForm/FieldsFormSkeleton.tsx","../../src/components/Heading/Heading.tsx","../../src/components/AddressForm/AddressForm.tsx","../../src/components/AddressForm/useAddressBackup.ts","../../src/hooks/useValidity/useValidity.ts","../../src/components/AddressForm/useAddressForm.ts","../../src/components/AddressForm/usePreselectedFields.ts"],"sourcesContent":["export const getFormValues = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n  const result = Object.fromEntries(formData);\n  return result;\n};\n\nexport const getFormErrors = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n\n  const data = Object.fromEntries(formData);\n\n  const result = Object.entries(data).reduce((result, [key]) => {\n    // @ts-ignore\n    const field = form.elements[key];\n\n    return field?.validationMessage\n      ? { ...result, [key]: field.validationMessage }\n      : { ...result };\n  }, {});\n\n  return result;\n};\n","export interface fieldCodes {\n  firstname: string;\n  lastname: string;\n  company: string;\n  country: string;\n  region: string;\n  city: string;\n  postcode: string;\n  telephone: string;\n  street: string;\n  email: string;\n  middlename: string;\n  prefix: string;\n  suffix: string;\n}\n\n// HTML attribute: autocomplete\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n// https://www.w3.org/TR/WCAG21/#input-purposes\nconst autocompleteFieldCodes: fieldCodes = {\n  firstname: 'given-name',\n  lastname: 'family-name',\n  company: 'organization',\n  country: 'country',\n  region: 'address-level1',\n  city: 'address-level2',\n  postcode: 'postal-code',\n  telephone: 'tel',\n  street: 'address-line1',\n  email: 'email',\n  middlename: 'additional-name',\n  prefix: 'honorific-prefix',\n  suffix: 'honorific-suffix',\n};\n\nexport default autocompleteFieldCodes;\n","export function isEmpty(obj: Record<string, any>): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import { AttributeFrontendInputEnum } from '@/checkout/__generated__/types';\nimport { FormFields } from '@/checkout/api';\nimport {\n  AddressFormErrors,\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Country,\n  Region,\n  StoreConfig,\n} from '@/checkout/data/models';\nimport { regionsSignal } from '@/checkout/signals';\n\nimport {\n  getMultilineValues,\n  refetchEstimatedShippingMethods,\n} from '@/checkout/utils';\nimport { PickerOption } from '@adobe/elsie/src/components';\nimport { StateUpdater } from 'preact/hooks';\n\ntype FormFieldsProcessorProps = {\n  fields: FormFields;\n  address: AddressFormValues;\n  setAddress: StateUpdater<AddressFormValues>;\n  addressType: AddressFormTypes;\n  errors: AddressFormErrors;\n  config: StoreConfig;\n  availableRegions: Region[];\n  availableCountries: Country[] | undefined;\n  onSelection: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onBlur: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n};\n\nexport type FormField = Omit<FormFields[number], 'options'> & {\n  addressType: AddressFormTypes;\n  className: string;\n  disabled?: boolean;\n  error: string | string[];\n  handleSelect?: (event: Event) => void;\n  id?: string;\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n  options?: PickerOption[];\n  value: string | string[];\n};\n\ntype FormFieldOptions = FormFields[number]['options'];\n\nconst isValidOption = (option: FormFieldOptions[number]) => {\n  return option?.label && option?.value;\n};\n\nconst transformFormFieldOptions = (data: FormFieldOptions): PickerOption[] => {\n  if (!data) return [];\n\n  return data.filter(isValidOption).map((option) => ({\n    text: option!.label,\n    value: option!.value,\n  }));\n};\n\nconst transformRegionOptions = (regions: Region[]): PickerOption[] => {\n  return regions.map((region) => {\n    const value = region?.id?.toString() || region.code;\n    return { text: region.name, value };\n  });\n};\n\nconst transformCountryOptions = (\n  countries: Country[] | undefined\n): PickerOption[] => {\n  if (!countries) return [];\n\n  return countries.map((country) => ({\n    text: country.label,\n    value: country.value,\n  }));\n};\n\nexport function processFormFields({\n  fields,\n  address,\n  setAddress,\n  addressType,\n  errors,\n  config,\n  availableCountries,\n  availableRegions,\n  onSelection,\n  onChange,\n  onBlur,\n  onInvalid,\n}: FormFieldsProcessorProps): FormField[] {\n  const resetRegion = () => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.Region]: '',\n      [AddressFormFields.RegionId]: '',\n    }));\n  };\n\n  const syncRegionId = (regionId: string) => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.RegionId]: regionId,\n    }));\n  };\n\n  return fields.map((field) => {\n    let is_required = field.is_required;\n    let value: string | string[];\n    let inputType = field.frontend_input;\n    let options: PickerOption[] = [];\n    let error: string | string[];\n    let handleSelect;\n    let disabled = false;\n\n    if (inputType === 'MULTILINE') {\n      value = getMultilineValues(field.code, address);\n      error = getMultilineValues(field.code, errors);\n    } else {\n      value = address[field.code];\n      error = errors[field.code] || '';\n    }\n\n    if (\n      field.code !== AddressFormFields.Region &&\n      field.code !== AddressFormFields.Country\n    ) {\n      options = transformFormFieldOptions(field.options);\n    }\n\n    if (field.code === AddressFormFields.Country) {\n      options = transformCountryOptions(availableCountries);\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.country = value as string;\n\n        handleSelect = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          const { value } = target;\n\n          if (value) {\n            refetchEstimatedShippingMethods({\n              country_code: value,\n            });\n          }\n\n          onSelection(event);\n          resetRegion();\n        };\n      } else {\n        handleSelect = onSelection;\n      }\n    }\n\n    if (field.code === AddressFormFields.RegionId) {\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.selectedRegionId = value as string;\n      }\n    }\n\n    if (field.code === AddressFormFields.Region) {\n      if (addressType === regionsSignal.value.addressType) {\n        disabled = regionsSignal.value.pending;\n      }\n\n      is_required = config!.countriesWithRequiredRegion.includes(\n        address?.country_id\n      );\n      options = transformRegionOptions(availableRegions);\n\n      if (!is_required && !config!.displayStateIfOptional) {\n        inputType = AttributeFrontendInputEnum.Undefined;\n      }\n\n      inputType =\n        options.length > 0\n          ? AttributeFrontendInputEnum.Select\n          : AttributeFrontendInputEnum.Text;\n\n      if (inputType === 'SELECT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          handleSelect = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const selectedRegion = target.value;\n\n            refetchEstimatedShippingMethods({\n              country_code: regionsSignal.value.country as string,\n              region_id: selectedRegion,\n            });\n\n            onSelection(event);\n            syncRegionId(selectedRegion);\n          };\n        } else {\n          handleSelect = (event: Event) => {\n            onSelection(event);\n            const target = event.target as HTMLSelectElement;\n            const selectedRegion = target.value;\n            syncRegionId(selectedRegion);\n          };\n        }\n      } else if (inputType === 'TEXT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          const defaultOnChange = onChange;\n\n          onChange = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const { value } = target;\n\n            if (regionsSignal.value.country) {\n              refetchEstimatedShippingMethods({\n                country_code: regionsSignal.value.country as string,\n                region_name: value as string,\n              });\n            }\n\n            defaultOnChange(event);\n          };\n        }\n      }\n\n      value =\n        options.length > 0\n          ? options.find((regionOption) => regionOption!.value === value)\n              ?.value || ''\n          : value;\n    }\n\n    if (field.code === AddressFormFields.PostCode) {\n      is_required = !config!.countriesWithOptionalZipCode.includes(\n        address?.country_id as string\n      );\n    }\n\n    return {\n      ...field,\n      is_required,\n      frontend_input: inputType,\n      addressType,\n      className: `checkout-address-form__${field.code}`,\n      value,\n      options,\n      error,\n      onChange,\n      onBlur,\n      onInvalid,\n      handleSelect,\n      disabled,\n    };\n  });\n}\n\nexport type ProcessedFormFields = ReturnType<typeof processFormFields>;\n","import { cartSignal } from '@/checkout/signals';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { ShippingEstimationCriteria, estimateShippingMethods } from '@/checkout/api';\n\nlet estimateShipppingTimer: ReturnType<typeof setTimeout>;\nexport function refetchEstimatedShippingMethods(\n  criteria: ShippingEstimationCriteria\n) {\n  const cartData = cartSignal.value.data;\n  const hasCartData = !!cartData;\n  const firstAddress = cartData?.shippingAddresses?.[0];\n  const availableShippingMethods = firstAddress?.availableShippingMethods;\n\n  if (hasCartData && !availableShippingMethods) {\n    clearTimeout(estimateShipppingTimer);\n\n    estimateShipppingTimer = setTimeout(() => {\n      estimateShippingMethods({ cartId: cartData.id, criteria });\n    }, DEBOUNCE_TIME);\n  }\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nexport const useBreakpoint = () => {\n  const getBreakpoint = () => {\n    if (window.innerWidth >= 1920) return 'xxlarge';\n    if (window.innerWidth >= 1366) return 'xlarge';\n    if (window.innerWidth >= 1024) return 'large';\n    if (window.innerWidth >= 768) return 'medium';\n\n    return 'small';\n  };\n\n  const [breakpoint, setBreakpoint] = useState<\n    ReturnType<typeof getBreakpoint>\n  >(getBreakpoint());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const handleResize = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setBreakpoint(getBreakpoint()), 50);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return breakpoint;\n};\n","import { Heading } from '@/checkout/components';\nimport { useBreakpoint } from '@/checkout/hooks/useBreakpoint';\nimport { Text } from '@adobe/elsie/i18n';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nimport '@/checkout/components/Checkout/Checkout.css';\n\nconst ConditionalWrapper: FunctionComponent<{\n  children?: VNode;\n  className: string;\n}> = ({ children, className }) => {\n  const breakpoint = useBreakpoint();\n  if (breakpoint === 'small') return <>{children}</>;\n  return <div className={className}>{children}</div>;\n};\n\nexport type AsideSections = {\n  cartSummary: VNode;\n  orderSummary: VNode;\n};\n\nconst Aside: FunctionComponent<{ sections: AsideSections }> = ({\n  sections,\n}) => {\n  return (\n    <ConditionalWrapper className=\"checkout__aside\">\n      <>\n        <VComponent node={sections.orderSummary} />\n        <VComponent node={sections.cartSummary} />\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport type MainSections = {\n  billingAddress: VNode;\n  billToShippingAddress?: VNode;\n  login: VNode;\n  paymentMethods: VNode;\n  placeOrder: VNode;\n  shippingAddress?: VNode;\n  shippingMethods?: VNode;\n};\n\nconst MainContent: FunctionComponent<MainSections> = ({\n  billingAddress,\n  billToShippingAddress,\n  login,\n  paymentMethods,\n  placeOrder,\n  shippingAddress,\n  shippingMethods,\n}) => {\n  return (\n    <>\n      <VComponent node={login} />\n      {shippingAddress && <VComponent node={shippingAddress} />}\n      {billToShippingAddress && <VComponent node={billToShippingAddress} />}\n      {shippingMethods && <VComponent node={shippingMethods} />}\n      <VComponent node={paymentMethods} />\n      <VComponent node={billingAddress} />\n      <VComponent node={placeOrder} />\n    </>\n  );\n};\n\nconst Main: FunctionComponent<{\n  outOfStock?: VNode;\n  sections?: MainSections;\n}> = ({ outOfStock, sections }) => {\n  return (\n    <ConditionalWrapper className=\"checkout__main\">\n      <>\n        <Heading level={1} className=\"checkout-title\">\n          <Text id=\"Checkout.title\" />\n        </Heading>\n\n        {outOfStock && (\n          <VComponent className=\"checkout-outOfStock\" node={outOfStock} />\n        )}\n\n        {sections && <MainContent {...sections} />}\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport interface CheckoutProps extends HTMLAttributes<HTMLDivElement> {\n  banner?: VNode;\n}\n\ninterface CheckoutComponent extends FunctionComponent<CheckoutProps> {\n  Main: typeof Main;\n  Aside: typeof Aside;\n}\n\nexport const Checkout: CheckoutComponent = (props) => {\n  const { banner, className, children, ...restProps } = props;\n\n  return (\n    <div className={classes(['checkout', className])} {...restProps}>\n      {banner && <VComponent className=\"checkout__banner\" node={banner} />}\n      <div className=\"checkout__content\">{children}</div>\n    </div>\n  );\n};\n\nCheckout.Main = Main;\nCheckout.Aside = Aside;\n","import { ValidationRule } from '@/checkout/__generated__/types';\nimport { BaseField, validityProps } from '@/checkout/components/FieldsForm';\nimport autocompleteFieldCodes, {\n  fieldCodes,\n} from '@/checkout/utils/autocompleteFieldCodes/autocompleteFieldCodes';\nimport { Field, Input, Picker } from '@adobe/elsie/components';\n\nconst hiddenField = (field: BaseField) => {\n  const { id, addressType, className, code, value, default_value } = field;\n  const fieldID = id || code;\n\n  return (\n    <input\n      className={className}\n      id={`${addressType}-${fieldID}`}\n      key={code}\n      name={code}\n      type=\"hidden\"\n      value={value ?? default_value}\n    />\n  );\n};\n\nconst textField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    error,\n    id,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const validity = validityProps(validate_rules as ValidationRule[]);\n  const fieldID = id || code;\n\n  return (\n    <Field disabled={field.disabled} error={error as string}>\n      <Input\n        aria-label={field.label!}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        className={className}\n        floatingLabel={`${field.label} ${field.is_required ? '*' : ''}`}\n        id={`${addressType}-${fieldID}`}\n        onBlur={onBlur}\n        onChange={onChange}\n        onInvalid={onInvalid}\n        placeholder={field.label!}\n        required={field.is_required || false}\n        type=\"text\"\n        // @ts-ignore\n        name={code}\n        // @ts-ignore\n        value={value ?? undefined}\n        {...validity}\n      />\n    </Field>\n  );\n};\n\nconst multilineField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    id,\n    is_required,\n    label,\n    multiline_count,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const numOfFields = multiline_count ?? 0;\n  const fieldID = id || code;\n  const validity = validityProps(validate_rules as ValidationRule[]);\n\n  return (\n    <>\n      {Array.from(Array(numOfFields).keys()).map((i) => (\n        <Field\n          disabled={disabled}\n          error={(error as string[])?.[i] || ''}\n          key={`${code}-${i}`}\n          className=\"dropin-field--multiline\"\n        >\n          <Input\n            id={`${addressType}-${fieldID}-${i}`}\n            className={className}\n            floatingLabel={`${label} ${i != 0 ? i : ''} ${\n              is_required && i === 0 ? '*' : ''\n            }`}\n            autocomplete={\n              i === 0 ? autocompleteFieldCodes[code as keyof fieldCodes] : 'off'\n            }\n            aria-label={label!}\n            placeholder={`${label} ${i != 0 ? i : ''}`}\n            type=\"text\"\n            required={is_required && i === 0}\n            onChange={onChange}\n            onBlur={onBlur}\n            onInvalid={onInvalid}\n            // @ts-ignore\n            name={`${code}-${i}`}\n            // @ts-ignore\n            value={(value as string[])?.[i] || undefined}\n            {...validity}\n          />\n        </Field>\n      ))}\n    </>\n  );\n};\n\nconst selectField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    handleSelect,\n    id,\n    is_required,\n    label,\n    onBlur,\n    onInvalid,\n    options,\n    value,\n  } = field;\n\n  const fieldID = id || code;\n  const handleSelectAttribute = handleSelect ? { handleSelect } : {};\n\n  return (\n    <Field disabled={disabled} error={error as string}>\n      <Picker\n        id={`${addressType}-${fieldID}`}\n        className={className}\n        key={code}\n        name={code}\n        floatingLabel={`${label} ${is_required ? '*' : ''}`}\n        required={is_required}\n        placeholder={label!}\n        aria-label={label!}\n        options={options}\n        value={value as string}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        onBlur={onBlur}\n        onInvalid={onInvalid}\n        {...handleSelectAttribute}\n      />\n    </Field>\n  );\n};\n\nexport const createField = (field: BaseField) => {\n  switch (field.frontend_input) {\n    case 'BOOLEAN':\n    case 'DATE':\n    case 'DATETIME':\n    case 'FILE':\n    case 'GALLERY':\n    case 'IMAGE':\n    case 'MEDIA_IMAGE':\n    case 'MULTISELECT':\n    case 'PRICE':\n    case 'TEXTAREA':\n    case 'UNDEFINED':\n    case 'WEIGHT':\n      return null;\n    case 'HIDDEN':\n      return hiddenField(field);\n    case 'TEXT':\n      return textField(field);\n    case 'MULTILINE':\n      return multilineField(field);\n    case 'SELECT':\n      return selectField(field);\n    default:\n      throw new Error(`Unknown field type: ${field.frontend_input}`);\n  }\n};\n","import {\n  ValidationRule,\n  ValidationRuleEnum,\n} from '@/checkout/__generated__/types';\n\nexport type ValidityProps = {\n  accept?: string;\n  max?: string | number;\n  maxLength?: number;\n  min?: string | number;\n  minLength?: number;\n  pattern?: string;\n  required?: boolean;\n};\n\nexport type InputValidation =\n  | 'alphanumeric'\n  | 'alphanumeric-w-space'\n  | 'alphanum-with-spaces'\n  | 'alpha'\n  | 'url'\n  | 'numeric'\n  | 'email';\n\nexport const validityProps = (\n  rules: ValidationRule[]\n): ValidationRule & ValidityProps =>\n  rules.reduce((props, rule) => {\n    switch (rule.name) {\n      case ValidationRuleEnum.DateRangeMax:\n        return { ...props, max: rule.value };\n      case ValidationRuleEnum.DateRangeMin:\n        return { ...props, min: rule.value };\n      case ValidationRuleEnum.FileExtensions:\n        return { ...props, accept: rule.value };\n      case ValidationRuleEnum.InputValidation:\n        return {\n          ...props,\n          pattern: patternFor(rule.value as InputValidation),\n        };\n      case ValidationRuleEnum.MaxFileSize:\n      case ValidationRuleEnum.MaxImageHeight:\n      case ValidationRuleEnum.MaxImageWidth:\n        return props;\n      case ValidationRuleEnum.MaxTextLength:\n        return { ...props, maxLength: rule.value };\n      case ValidationRuleEnum.MinTextLength:\n        return { ...props, minLength: rule.value };\n      default:\n        throw new Error(`Unknown rule: ${rule.name}`);\n    }\n  }, {});\n\nexport type Patterns = {\n  [key in InputValidation]: RegExp;\n};\n\n// TODO allow to override patterns\nexport const patterns: Patterns = {\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'alphanumeric-w-space': /^[a-zA-Z0-9 ]+$/,\n  'alphanum-with-spaces': /^[a-zA-Z0-9 ]+$/,\n  email:\n    /^([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\n  numeric: /^[0-9]+$/,\n  url: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n};\n\nconst patternFor = (type: InputValidation): string => {\n  switch (type) {\n    case 'alpha':\n      return patterns.alpha.source;\n    case 'alphanumeric':\n      return patterns.alphanumeric.source;\n    case 'alphanumeric-w-space':\n      return patterns['alphanumeric-w-space'].source;\n    case 'alphanum-with-spaces':\n      return patterns['alphanum-with-spaces'].source;\n    case 'url':\n      return patterns.url.source;\n    case 'numeric':\n      return patterns.numeric.source;\n    case 'email':\n      return patterns.email.source;\n    default:\n      throw new Error(`Unknown validation type: ${type}`);\n  }\n};\n","import { FunctionComponent, Ref } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/FieldsForm/FieldsForm.css';\nimport { createField } from './fieldFactory';\nimport { Heading } from '@/checkout/components';\nimport { Text } from '@adobe/elsie/i18n';\nimport { ProcessedFormFields } from '@/checkout/utils';\n\nexport type BaseField = ProcessedFormFields[number] & {\n  id?: string;\n  disabled?: boolean;\n  handleSelect?: (event: Event) => void;\n};\n\nexport interface FieldsFormProps extends HTMLAttributes<HTMLDivElement> {\n  headingId: string;\n  name: string;\n  formRef: Ref<HTMLFormElement>;\n  fields: BaseField[];\n}\n\nexport const FieldsForm: FunctionComponent<FieldsFormProps> = ({\n  className,\n  name,\n  headingId,\n  formRef,\n  fields,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['checkout-fields-form', className])}>\n      <Heading\n        level={2}\n        children={<Text id={headingId} />}\n        className=\"checkout-fields-form__title\"\n      />\n\n      <form\n        name={name}\n        ref={formRef}\n        className={classes(['checkout-fields-form__form', className])}\n        noValidate\n      >\n        {fields\n          .sort((a, b) => {\n            return a.sort_order! - b.sort_order!;\n          })\n          .map(createField)}\n      </form>\n    </div>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const FieldsFormSkeleton: FunctionComponent = (props) => {\n  return (\n    <Skeleton {...props}>\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n    </Skeleton>\n  );\n};\n","import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, JSX } from 'preact/compat';\nimport '@/checkout/components/Heading/Heading.css';\n\nexport interface HeadingProps extends Omit<HTMLAttributes<HTMLHeadingElement>, 'level'> {\n  level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: FunctionComponent<HeadingProps> = ({\n  className,\n  children,\n  level = 2,\n}) => {\n  const Heading =\n    level >= 1 && level <= 6\n      ? (`h${level}` as keyof JSX.IntrinsicElements)\n      : 'h2';\n\n  return (\n      <Heading className={className}>\n        {children}\n      </Heading>\n  );\n};\n","import { FormFields, getRegions } from '@/checkout/api';\nimport { FieldsFormSkeleton } from '@/checkout/components';\nimport {\n  DefaultValues,\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n  SaveAddressCommand,\n  useAddressForm,\n  usePreselectedFields,\n} from '@/checkout/components/AddressForm';\nimport '@/checkout/components/AddressForm/AddressForm.css';\nimport { FieldsForm as Component } from '@/checkout/components/FieldsForm/FieldsForm';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  useStore,\n  useAddressFormFields,\n  useCountries,\n} from '@/checkout/context';\nimport {\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Region,\n} from '@/checkout/data/models';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty, processFormFields } from '@/checkout/utils';\nimport { getFormErrors } from '@adobe/elsie/lib/form-values';\nimport {\n  HTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'preact/compat';\nimport { StateUpdater } from 'preact/hooks';\n\nfunction useDefaultValues(defaultCountry: string | undefined) {\n  const [defaultValues, setDefaultValues] = useState<DefaultValues>({});\n\n  useEffect(() => {\n    if (!defaultCountry) return;\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      country_id: defaultCountry,\n    }));\n  }, [defaultCountry]);\n\n  return { defaultValues };\n}\n\nfunction useRegions({\n  country,\n  addressType,\n}: {\n  country: string | undefined;\n  addressType: AddressFormTypes;\n}) {\n  const [availableRegions, setAvailableRegions] = useState<Region[]>([]);\n\n  useEffect(() => {\n    if (!country) {\n      setAvailableRegions([]);\n      return;\n    }\n\n    getRegions(country, addressType)\n      .then((data) => {\n        setAvailableRegions(data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [setAvailableRegions, country, addressType]);\n\n  return { availableRegions };\n}\n\nfunction useFormFill({\n  shouldAutoFillForm,\n  addressType,\n  setAddress,\n  fields,\n}: {\n  shouldAutoFillForm?: () => boolean;\n  addressType: AddressFormTypes;\n  setAddress: StateUpdater<AddressFormValues>;\n  fields?: FormFields;\n}) {\n  const [hasFormFillCompleted, setHasFormFillCompleted] = useState(false);\n  const cartData = cartSignal.value.data;\n\n  useEffect(() => {\n    if (hasFormFillCompleted) return;\n\n    const isReadyToProcess = cartData && fields;\n    if (!isReadyToProcess) return;\n\n    setHasFormFillCompleted(true);\n\n    const addressData =\n      addressType === AddressFormTypes.SHIPPING\n        ? cartData?.shippingAddresses\n        : cartData?.billingAddress;\n\n    const isAnAddressList = Array.isArray(addressData);\n    const hasAddressData = isAnAddressList\n      ? addressData.length > 0\n      : !!addressData;\n\n    if (!hasAddressData) return;\n    if (shouldAutoFillForm && !shouldAutoFillForm()) return;\n\n    const isMultiline = (code: string) => {\n      if (!fields) return false;\n      const field = fields.find((field) => field.code === code);\n      if (!field) return false;\n      return field.frontend_input === 'MULTILINE';\n    };\n\n    const firstAddress = Array.isArray(addressData)\n      ? addressData[0]\n      : addressData;\n\n    if (!firstAddress) return;\n\n    const addressFormValues: AddressFormValues = {\n      [AddressFormFields.City]: firstAddress.city,\n      [AddressFormFields.Company]: firstAddress.company || '',\n      [AddressFormFields.Country]: firstAddress.country.value,\n      [AddressFormFields.FirstName]: firstAddress.firstName,\n      [AddressFormFields.LastName]: firstAddress.lastName,\n      [AddressFormFields.PostCode]: firstAddress.postCode || '',\n      [AddressFormFields.Telephone]: firstAddress.telephone || '',\n      [AddressFormFields.Vat]: firstAddress.vatId || '',\n    };\n\n    const region = firstAddress.region;\n\n    if (region) {\n      const regionId = region?.id?.toString();\n\n      if (regionId) {\n        addressFormValues[AddressFormFields.Region] = regionId;\n        addressFormValues[AddressFormFields.RegionId] = regionId;\n      } else {\n        addressFormValues[AddressFormFields.Region] = region.code;\n      }\n    }\n\n    if (firstAddress?.street && firstAddress.street.length > 0) {\n      firstAddress.street.forEach((street, index) => {\n        addressFormValues[\n          `${AddressFormFields.Street}${MULTILINE_SUFFIX}${index}`\n        ] = street!;\n      });\n    }\n\n    const customAttributes = firstAddress?.customAttributes || [];\n\n    customAttributes.forEach((attribute) => {\n      if (!isMultiline(attribute.code)) {\n        addressFormValues[attribute.code] = attribute.value;\n      } else {\n        const values = attribute.value.split(MULTILINE_CUSTOM_ATTR_SPLIT);\n        values.forEach((value, index) => {\n          addressFormValues[`${attribute.code}${MULTILINE_SUFFIX}${index}`] =\n            value;\n        });\n      }\n    });\n\n    setAddress(addressFormValues);\n  }, [\n    setAddress,\n    shouldAutoFillForm,\n    addressType,\n    cartData,\n    fields,\n    hasFormFillCompleted,\n  ]);\n}\n\nexport interface AddressFormProps extends HTMLAttributes<HTMLDivElement> {\n  name: string;\n  preselectedFields?: PreselectedAddressFields;\n  addressType: AddressFormTypes;\n  headingId: string;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n  shouldAutoFillForm?: () => boolean;\n}\n\nexport type AddressFormHandle = {\n  triggerSaveAddress: (\n    signal: AbortSignal\n  ) => Promise<typeof cartSignal.value.data> | undefined;\n};\n\nexport const AddressForm = forwardRef<AddressFormHandle, AddressFormProps>(\n  (\n    {\n      name,\n      preselectedFields,\n      addressType,\n      headingId,\n      saveAddressHandler,\n      children,\n      shouldAutoFillForm,\n      ...props\n    },\n    ref\n  ) => {\n    const { fields } = useAddressFormFields();\n    const { countries: availableCountries } = useCountries();\n    const isLoadingCountries = availableCountries === undefined;\n    const isLoadingFormFields = fields === undefined;\n\n    const { config } = useStore();\n    const isLoadingStoreConfig = config === undefined;\n\n    const { defaultValues } = useDefaultValues(config?.defaultCountry);\n\n    const { preselection } = usePreselectedFields({\n      fields,\n      preselectedFields,\n    });\n\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const {\n      address,\n      setAddress,\n      onSelection,\n      errors,\n      onChange,\n      onInvalid,\n      onBlur,\n    } = useAddressForm({\n      formRef,\n      type: addressType,\n      defaultValues,\n      preselection,\n      saveAddressHandler,\n    });\n\n    const { availableRegions } = useRegions({\n      country: address.country_id,\n      addressType,\n    });\n\n    useImperativeHandle(ref, () => ({\n      triggerSaveAddress: (signal: AbortSignal) => {\n        if (!formRef.current) return;\n        const errors = getFormErrors(formRef.current);\n        if (!isEmpty(errors)) return;\n        return saveAddressHandler({ signal, address });\n      },\n    }));\n\n    useFormFill({\n      shouldAutoFillForm,\n      addressType,\n      setAddress,\n      fields,\n    });\n\n    const isLoading =\n      isLoadingFormFields || isLoadingCountries || isLoadingStoreConfig;\n\n    if (isLoading) {\n      return <FieldsFormSkeleton data-testid={`${addressType}-skeleton`} />;\n    }\n\n    const transformedFields = processFormFields({\n      fields,\n      address,\n      setAddress,\n      addressType,\n      errors,\n      config,\n      availableCountries,\n      availableRegions,\n      onSelection,\n      onChange,\n      onBlur,\n      onInvalid,\n    });\n\n    const typeMapping = {\n      [AddressFormTypes.SHIPPING]: 'shipping',\n      [AddressFormTypes.BILLING]: 'billing',\n    };\n\n    return (\n      <Component\n        {...props}\n        data-testid={`${typeMapping[addressType]}-form`}\n        name={name}\n        className={`checkout-${typeMapping[addressType]}-form`}\n        headingId={headingId}\n        formRef={formRef}\n        fields={transformedFields}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useServices } from '@/checkout/context';\nimport { events } from '@adobe/event-bus';\nimport { DEBOUNCE_TIME } from './constants';\nimport {\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models/address-form';\n\nexport function useAddressBackup(addressType: AddressFormTypes) {\n  const { backupService } = useServices();\n  const [addressBackup, setAddressBackup] = useState<AddressFormValues | null>(\n    null\n  );\n\n  // restore address from local storage\n  useEffect(() => {\n    const backup = backupService.restore<AddressFormValues>(addressType);\n    if (!backup) return;\n    setAddressBackup(backup);\n  }, [addressType, backupService]);\n\n  // remove backup when the order is placed\n  useEffect(() => {\n    const onOrder = events.on('checkout/order', () => {\n      backupService.remove(addressType);\n    });\n\n    return () => {\n      onOrder?.off();\n    };\n  }, [addressType, backupService]);\n\n  const backup = useCallback(\n    (address: AddressFormValues) => {\n      return setTimeout(() => {\n        // we do not want to update the state to avoid re-rendering\n        backupService.backup<AddressFormValues>(addressType, address);\n      }, DEBOUNCE_TIME);\n    },\n    [addressType, backupService]\n  );\n\n  const removeBackup = useCallback(() => {\n    backupService.remove(addressType);\n  }, [addressType, backupService]);\n\n  return { addressBackup, backup, removeBackup };\n}\n","import { useCallback, useState } from 'preact/hooks';\n\nexport type Translations = {\n  badInput: string;\n  patternMismatch: string;\n  rangeOverflow: string;\n  rangeUnderflow: string;\n  tooLong: string;\n  tooShort: string;\n  typeMismatch: string;\n  valueMissing: string;\n};\n\ntype FormElement = HTMLInputElement | HTMLSelectElement;\n\ntype Constraint =\n  | 'badInput'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valueMissing';\n\ntype Attribute = 'aria-label' | 'maxlength' | 'minlength' | 'min' | 'max';\n\nconst attributesMapping: Record<Constraint, Attribute> = {\n  badInput: 'aria-label',\n  patternMismatch: 'aria-label',\n  rangeOverflow: 'max',\n  rangeUnderflow: 'min',\n  tooLong: 'maxlength',\n  tooShort: 'minlength',\n  typeMismatch: 'aria-label',\n  valueMissing: 'aria-label',\n};\n\nconst constraints: Constraint[] = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valueMissing',\n];\n\nexport const useValidity = (translations: Translations) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateFormElement = useCallback(\n    (formElement: FormElement) => {\n      const { name, validity, validationMessage } = formElement;\n\n      let error = validity.valid ? '' : validationMessage;\n\n      constraints.forEach((constraint) => {\n        if (!validity[constraint]) return;\n        const translation = translations[constraint];\n        if (!translation) return;\n        const attribute = attributesMapping[constraint];\n        error = translation.replace(\n          '{field}',\n          formElement.getAttribute(attribute) || ''\n        );\n      });\n\n      setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n    },\n    [translations]\n  );\n\n  return {\n    errors,\n    validateFormElement,\n  };\n};\n","import { PreselectedMappedField } from '@/checkout/components/AddressForm';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { useAddressBackup } from '@/checkout/components/AddressForm/useAddressBackup';\nimport {\n  AddressFormErrors,\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models';\nimport {\n  Translations as ValidityTranslations,\n  useValidity,\n} from '@/checkout/hooks/useValidity';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty } from '@/checkout/utils';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getFormErrors } from '@adobe/elsie/lib';\nimport { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nexport type DefaultValues = {\n  country_id?: string;\n};\n\nexport type AddressFormState = {\n  address: AddressFormValues;\n  errors: AddressFormErrors;\n};\n\nexport type SaveAddressCommand = {\n  signal?: AbortSignal;\n  address: AddressFormValues;\n};\n\nexport type UseAddressFormProps = {\n  formRef: RefObject<HTMLFormElement>;\n  type: AddressFormTypes;\n  defaultValues?: DefaultValues;\n  preselection?: PreselectedMappedField | null;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n};\n\nconst isFormValid = (formRef: RefObject<HTMLFormElement>): boolean => {\n  const form = formRef.current;\n  if (!form) return false;\n  const errors = getFormErrors(form);\n  return isEmpty(errors);\n};\n\nexport const useAddressForm = ({\n  formRef,\n  type,\n  defaultValues = {},\n  preselection = {},\n  saveAddressHandler,\n}: UseAddressFormProps) => {\n  const translations = useText({\n    badInput: 'Checkout.AddressForm.Validity.badInput',\n    patternMismatch: 'Checkout.AddressForm.Validity.patternMismatch',\n    rangeUnderflow: 'Checkout.AddressForm.Validity.rangeUnderflow',\n    tooLong: 'Checkout.AddressForm.Validity.tooLong',\n    tooShort: 'Checkout.AddressForm.Validity.tooShort',\n    typeMismatch: 'Checkout.AddressForm.Validity.typeMismatch',\n    valueMissing: 'Checkout.AddressForm.Validity.valueMissing',\n  }) as ValidityTranslations;\n\n  const hasUnsavedChanges = useRef(false);\n  const [address, setAddress] = useState<AddressFormValues>({});\n\n  const { addressBackup, backup, removeBackup } = useAddressBackup(type);\n\n  const { errors, validateFormElement } = useValidity(translations);\n\n  const saveAddressForm = useCallback(\n    (command: SaveAddressCommand) => {\n      hasUnsavedChanges.current = false;\n      saveAddressHandler(command)\n        .then(() => {\n          removeBackup();\n        })\n        .catch((error) => {\n          hasUnsavedChanges.current = true;\n          console.error('Saving address form failed:', error);\n        });\n    },\n    [removeBackup, saveAddressHandler]\n  );\n\n  const updateField = (code: string, value: string) => {\n    setAddress((prevAddress) => ({\n      ...prevAddress,\n      [code]: value,\n    }));\n    hasUnsavedChanges.current = true;\n  };\n\n  const onChange = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n\n    updateField(name, value);\n\n    validateFormElement(target);\n  };\n\n  const onInvalid = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    validateFormElement(target);\n  };\n\n  const onSelection = (event: Event) => {\n    const target = event.target as HTMLSelectElement;\n    const { name, value } = target;\n    updateField(name, value);\n    validateFormElement(target);\n  };\n\n  const onBlur = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    target.checkValidity();\n  };\n\n  // load default, preselected and backup address\n  useEffect(() => {\n    setAddress((prevAddress) => {\n      return {\n        ...defaultValues,\n        ...preselection,\n        ...addressBackup,\n        ...prevAddress,\n      };\n    });\n  }, [defaultValues, preselection, addressBackup]);\n\n  // backup address\n  useEffect(() => {\n    if (!hasUnsavedChanges.current) return;\n    const timerId = backup(address);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [address, backup]);\n\n  // sync address with the backend\n  useEffect(() => {\n    if (!hasUnsavedChanges.current || !isFormValid(formRef)) return;\n\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timer = setTimeout(() => {\n      saveAddressForm({ signal, address });\n    }, DEBOUNCE_TIME);\n\n    return () => {\n      clearTimeout(timer);\n      controller.abort();\n    };\n  }, [address, formRef, saveAddressForm]);\n\n  return {\n    address,\n    setAddress,\n    errors,\n    onChange,\n    onSelection,\n    onBlur,\n    onInvalid,\n  };\n};\n","import { FormFields } from '@/checkout/api';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport { useMemo } from 'preact/hooks';\n\ntype PreselectedFieldKey = keyof PreselectedAddressFields;\n\nexport type PreselectedMappedField = {\n  country_id?: string;\n  region?: string;\n  postcode?: string;\n};\n\ntype PreselectedMappedFieldKey = keyof PreselectedMappedField;\n\nconst FIELD_CODE_MAPPING: {\n  [key in PreselectedFieldKey]: PreselectedMappedFieldKey;\n} = {\n  countryCode: 'country_id',\n  region: 'region',\n  postCode: 'postcode',\n};\n\nexport type UsePreselectedFieldsProps = {\n  fields?: FormFields;\n  preselectedFields?: PreselectedAddressFields;\n};\n\nexport function usePreselectedFields({\n  fields,\n  preselectedFields,\n}: UsePreselectedFieldsProps) {\n  const preselection =\n    useMemo(() => {\n      const hasFields = !!fields && fields.length > 0;\n      const hasPreselectedFields = !!preselectedFields;\n\n      if (!hasFields || !hasPreselectedFields) return null;\n\n      return Object.keys(preselectedFields).reduce((acc, code) => {\n        const formCode = FIELD_CODE_MAPPING[code as PreselectedFieldKey];\n        if (!formCode) return acc;\n\n        const formField = fields.some((field) => field.code === formCode);\n        if (!formField) return acc;\n\n        return {\n          ...acc,\n          [formCode]: preselectedFields[code as PreselectedFieldKey],\n        };\n      }, {} as PreselectedMappedField);\n    }, [fields, preselectedFields]);\n\n  return { preselection };\n}\n"],"names":["getFormErrors","form","formData","FormData","data","Object","fromEntries","result","entries","reduce","key","field","elements","validationMessage","autocompleteFieldCodes","firstname","lastname","company","country","region","city","postcode","telephone","street","email","middlename","prefix","suffix","isEmpty","obj","keys","length","constructor","isValidOption","option","label","value","transformFormFieldOptions","filter","map","text","transformRegionOptions","regions","id","toString","code","name","transformCountryOptions","countries","processFormFields","fields","address","setAddress","addressType","errors","config","availableCountries","availableRegions","onSelection","onChange","onBlur","onInvalid","resetRegion","AddressFormFields","Region","RegionId","syncRegionId","regionId","is_required","inputType","frontend_input","options","error","handleSelect","disabled","getMultilineValues","Country","AddressFormTypes","SHIPPING","regionsSignal","event","target","refetchEstimatedShippingMethods","country_code","selectedRegionId","pending","countriesWithRequiredRegion","includes","country_id","displayStateIfOptional","AttributeFrontendInputEnum","Undefined","Select","Text","selectedRegion","region_id","defaultOnChange","region_name","find","regionOption","PostCode","countriesWithOptionalZipCode","className","estimateShipppingTimer","criteria","cartData","cartSignal","hasCartData","firstAddress","shippingAddresses","availableShippingMethods","clearTimeout","setTimeout","estimateShippingMethods","cartId","DEBOUNCE_TIME","useBreakpoint","getBreakpoint","window","innerWidth","breakpoint","setBreakpoint","useState","useEffect","timeoutId","handleResize","addEventListener","removeEventListener","ConditionalWrapper","children","_jsx","_Fragment","Aside","sections","_jsxs","VComponent","node","orderSummary","cartSummary","MainContent","billingAddress","billToShippingAddress","login","paymentMethods","placeOrder","shippingAddress","shippingMethods","Main","outOfStock","Heading","level","Checkout","props","banner","restProps","classes","hiddenField","default_value","type","textField","validate_rules","validity","validityProps","fieldID","Field","Input","autocomplete","floatingLabel","placeholder","required","undefined","multilineField","multiline_count","numOfFields","Array","from","i","selectField","handleSelectAttribute","Picker","createField","Error","rules","rule","ValidationRuleEnum","DateRangeMax","max","DateRangeMin","min","FileExtensions","accept","InputValidation","pattern","patternFor","MaxFileSize","MaxImageHeight","MaxImageWidth","MaxTextLength","maxLength","MinTextLength","minLength","patterns","alpha","alphanumeric","numeric","url","source","FieldsForm","headingId","formRef","ref","noValidate","sort","a","b","sort_order","FieldsFormSkeleton","Skeleton","SkeletonRow","variant","size","fullWidth","lines","useDefaultValues","defaultCountry","defaultValues","setDefaultValues","useRegions","setAvailableRegions","getRegions","then","catch","console","useFormFill","shouldAutoFillForm","hasFormFillCompleted","setHasFormFillCompleted","addressData","isArray","isMultiline","addressFormValues","City","Company","FirstName","firstName","LastName","lastName","postCode","Telephone","Vat","vatId","forEach","index","Street","MULTILINE_SUFFIX","customAttributes","attribute","split","MULTILINE_CUSTOM_ATTR_SPLIT","AddressForm","forwardRef","preselectedFields","saveAddressHandler","useAddressFormFields","useCountries","isLoadingCountries","isLoadingFormFields","useStore","isLoadingStoreConfig","preselection","usePreselectedFields","useRef","useAddressForm","useImperativeHandle","triggerSaveAddress","signal","current","transformedFields","typeMapping","BILLING","Component","useAddressBackup","backupService","useServices","addressBackup","setAddressBackup","backup","restore","onOrder","events","on","remove","off","useCallback","removeBackup","attributesMapping","badInput","patternMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","typeMismatch","valueMissing","constraints","useValidity","translations","setErrors","validateFormElement","formElement","valid","constraint","translation","replace","getAttribute","prevErrors","isFormValid","useText","hasUnsavedChanges","saveAddressForm","command","updateField","prevAddress","checkValidity","timerId","controller","AbortController","timer","abort","FIELD_CODE_MAPPING","countryCode","useMemo","acc","formCode","some"],"mappings":"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"}
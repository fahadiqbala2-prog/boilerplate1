{"version":3,"file":"CartSummaryItem__iGzWaHX3tp.js","sources":["../../../ElsieSDK/packages/elsie/src/lib/form-values.ts","../../src/utils/autocompleteFieldCodes/autocompleteFieldCodes.ts","../../src/utils/isEmpty/isEmpty.ts","../../src/utils/processFormFields/processFormFields.ts","../../src/utils/refetchEstimatedShippingMethods/refetchEstimatedShippingMethods.ts","../../src/components/FieldsForm/validation.ts","../../src/components/FieldsForm/FieldsFormSkeleton.tsx","../../src/components/FieldsForm/fieldFactory.tsx","../../src/components/FieldsForm/FieldsForm.tsx","../../src/components/AddressForm/AddressForm.tsx","../../src/components/AddressForm/useAddressBackup.ts","../../src/hooks/useValidity/useValidity.ts","../../src/components/AddressForm/useAddressForm.ts","../../src/components/AddressForm/usePreselectedFields.ts","../../src/hooks/useBreakpoint/useBreakpoint.ts","../../src/components/Checkout/Checkout.tsx","../../src/components/Heading/Heading.tsx"],"sourcesContent":["export const getFormValues = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n  const result = Object.fromEntries(formData);\n  return result;\n};\n\nexport const getFormErrors = (form: HTMLFormElement) => {\n  const formData: any = new FormData(form);\n\n  const data = Object.fromEntries(formData);\n\n  const result = Object.entries(data).reduce((result, [key]) => {\n    // @ts-ignore\n    const field = form.elements[key];\n\n    return field?.validationMessage\n      ? { ...result, [key]: field.validationMessage }\n      : { ...result };\n  }, {});\n\n  return result;\n};\n","export interface fieldCodes {\n  firstname: string;\n  lastname: string;\n  company: string;\n  country: string;\n  region: string;\n  city: string;\n  postcode: string;\n  telephone: string;\n  street: string;\n  email: string;\n  middlename: string;\n  prefix: string;\n  suffix: string;\n}\n\n// HTML attribute: autocomplete\n// https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete\n// https://www.w3.org/TR/WCAG21/#input-purposes\nconst autocompleteFieldCodes: fieldCodes = {\n  firstname: 'given-name',\n  lastname: 'family-name',\n  company: 'organization',\n  country: 'country',\n  region: 'address-level1',\n  city: 'address-level2',\n  postcode: 'postal-code',\n  telephone: 'tel',\n  street: 'address-line1',\n  email: 'email',\n  middlename: 'additional-name',\n  prefix: 'honorific-prefix',\n  suffix: 'honorific-suffix',\n};\n\nexport default autocompleteFieldCodes;\n","export function isEmpty(obj: Record<string, any>): boolean {\n  return Object.keys(obj).length === 0 && obj.constructor === Object;\n}","import { AttributeFrontendInputEnum } from '@/checkout/__generated__/types';\nimport { FormFields } from '@/checkout/api';\nimport {\n  AddressFormErrors,\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Country,\n  Region,\n  StoreConfig,\n} from '@/checkout/data/models';\nimport { regionsSignal } from '@/checkout/signals';\n\nimport {\n  getMultilineValues,\n  refetchEstimatedShippingMethods,\n} from '@/checkout/utils';\nimport { PickerOption } from '@adobe/elsie/src/components';\nimport { StateUpdater } from 'preact/hooks';\n\ntype FormFieldsProcessorProps = {\n  fields: FormFields;\n  address: AddressFormValues;\n  setAddress: StateUpdater<AddressFormValues>;\n  addressType: AddressFormTypes;\n  errors: AddressFormErrors;\n  config: StoreConfig;\n  availableRegions: Region[];\n  availableCountries: Country[] | undefined;\n  onSelection: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onBlur: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n};\n\nexport type FormField = Omit<FormFields[number], 'options'> & {\n  addressType: AddressFormTypes;\n  className: string;\n  disabled?: boolean;\n  error: string | string[];\n  handleSelect?: (event: Event) => void;\n  id?: string;\n  onBlur: (event: Event) => void;\n  onChange: (event: Event) => void;\n  onInvalid: (event: Event) => void;\n  options?: PickerOption[];\n  value: string | string[];\n};\n\ntype FormFieldOptions = FormFields[number]['options'];\n\nconst isValidOption = (option: FormFieldOptions[number]) => {\n  return option?.label && option?.value;\n};\n\nconst transformFormFieldOptions = (data: FormFieldOptions): PickerOption[] => {\n  if (!data) return [];\n\n  return data.filter(isValidOption).map((option) => ({\n    text: option!.label,\n    value: option!.value,\n  }));\n};\n\nconst transformRegionOptions = (regions: Region[]): PickerOption[] => {\n  return regions.map((region) => {\n    const value = region?.id?.toString() || region.code;\n    return { text: region.name, value };\n  });\n};\n\nconst transformCountryOptions = (\n  countries: Country[] | undefined\n): PickerOption[] => {\n  if (!countries) return [];\n\n  return countries.map((country) => ({\n    text: country.label,\n    value: country.value,\n  }));\n};\n\nexport function processFormFields({\n  fields,\n  address,\n  setAddress,\n  addressType,\n  errors,\n  config,\n  availableCountries,\n  availableRegions,\n  onSelection,\n  onChange,\n  onBlur,\n  onInvalid,\n}: FormFieldsProcessorProps): FormField[] {\n  const resetRegion = () => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.Region]: '',\n      [AddressFormFields.RegionId]: '',\n    }));\n  };\n\n  const syncRegionId = (regionId: string) => {\n    setAddress((address) => ({\n      ...address,\n      [AddressFormFields.RegionId]: regionId,\n    }));\n  };\n\n  return fields.map((field) => {\n    let is_required = field.is_required;\n    let value: string | string[];\n    let inputType = field.frontend_input;\n    let options: PickerOption[] = [];\n    let error: string | string[];\n    let handleSelect;\n    let disabled = false;\n\n    if (inputType === 'MULTILINE') {\n      value = getMultilineValues(field.code, address);\n      error = getMultilineValues(field.code, errors);\n    } else {\n      value = address[field.code];\n      error = errors[field.code] || '';\n    }\n\n    if (\n      field.code !== AddressFormFields.Region &&\n      field.code !== AddressFormFields.Country\n    ) {\n      options = transformFormFieldOptions(field.options);\n    }\n\n    if (field.code === AddressFormFields.Country) {\n      options = transformCountryOptions(availableCountries);\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.country = value as string;\n\n        handleSelect = (event: Event) => {\n          const target = event.target as HTMLInputElement;\n          const { value } = target;\n\n          if (value) {\n            refetchEstimatedShippingMethods({\n              country_code: value,\n            });\n          }\n\n          onSelection(event);\n          resetRegion();\n        };\n      } else {\n        handleSelect = onSelection;\n      }\n    }\n\n    if (field.code === AddressFormFields.RegionId) {\n      if (addressType === AddressFormTypes.SHIPPING) {\n        regionsSignal.value.selectedRegionId = value as string;\n      }\n    }\n\n    if (field.code === AddressFormFields.Region) {\n      if (addressType === regionsSignal.value.addressType) {\n        disabled = regionsSignal.value.pending;\n      }\n\n      is_required = config!.countriesWithRequiredRegion.includes(\n        address?.country_id\n      );\n      options = transformRegionOptions(availableRegions);\n\n      if (!is_required && !config!.displayStateIfOptional) {\n        inputType = AttributeFrontendInputEnum.Undefined;\n      }\n\n      inputType =\n        options.length > 0\n          ? AttributeFrontendInputEnum.Select\n          : AttributeFrontendInputEnum.Text;\n\n      if (inputType === 'SELECT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          handleSelect = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const selectedRegion = target.value;\n\n            refetchEstimatedShippingMethods({\n              country_code: regionsSignal.value.country as string,\n              region_id: selectedRegion,\n            });\n\n            onSelection(event);\n            syncRegionId(selectedRegion);\n          };\n        } else {\n          handleSelect = (event: Event) => {\n            onSelection(event);\n            const target = event.target as HTMLSelectElement;\n            const selectedRegion = target.value;\n            syncRegionId(selectedRegion);\n          };\n        }\n      } else if (inputType === 'TEXT') {\n        if (addressType === AddressFormTypes.SHIPPING) {\n          regionsSignal.value.selectedRegion = value as string;\n\n          const defaultOnChange = onChange;\n\n          onChange = (event: Event) => {\n            const target = event.target as HTMLInputElement;\n            const { value } = target;\n\n            if (regionsSignal.value.country) {\n              refetchEstimatedShippingMethods({\n                country_code: regionsSignal.value.country as string,\n                region_name: value as string,\n              });\n            }\n\n            defaultOnChange(event);\n          };\n        }\n      }\n\n      value =\n        options.length > 0\n          ? options.find((regionOption) => regionOption!.value === value)\n              ?.value || ''\n          : value;\n    }\n\n    if (field.code === AddressFormFields.PostCode) {\n      is_required = !config!.countriesWithOptionalZipCode.includes(\n        address?.country_id as string\n      );\n    }\n\n    return {\n      ...field,\n      is_required,\n      frontend_input: inputType,\n      addressType,\n      className: `checkout-address-form__${field.code}`,\n      value,\n      options,\n      error,\n      onChange,\n      onBlur,\n      onInvalid,\n      handleSelect,\n      disabled,\n    };\n  });\n}\n\nexport type ProcessedFormFields = ReturnType<typeof processFormFields>;\n","import { cartSignal } from '@/checkout/signals';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { ShippingEstimationCriteria, estimateShippingMethods } from '@/checkout/api';\n\nlet estimateShipppingTimer: ReturnType<typeof setTimeout>;\nexport function refetchEstimatedShippingMethods(\n  criteria: ShippingEstimationCriteria\n) {\n  const cartData = cartSignal.value.data;\n  const hasCartData = !!cartData;\n  const firstAddress = cartData?.shippingAddresses?.[0];\n  const availableShippingMethods = firstAddress?.availableShippingMethods;\n\n  if (hasCartData && !availableShippingMethods) {\n    clearTimeout(estimateShipppingTimer);\n\n    estimateShipppingTimer = setTimeout(() => {\n      estimateShippingMethods({ cartId: cartData.id, criteria });\n    }, DEBOUNCE_TIME);\n  }\n}\n","import {\n  ValidationRule,\n  ValidationRuleEnum,\n} from '@/checkout/__generated__/types';\n\nexport type ValidityProps = {\n  accept?: string;\n  max?: string | number;\n  maxLength?: number;\n  min?: string | number;\n  minLength?: number;\n  pattern?: string;\n  required?: boolean;\n};\n\nexport type InputValidation =\n  | 'alphanumeric'\n  | 'alphanumeric-w-space'\n  | 'alphanum-with-spaces'\n  | 'alpha'\n  | 'url'\n  | 'numeric'\n  | 'email';\n\nexport const validityProps = (\n  rules: ValidationRule[]\n): ValidationRule & ValidityProps =>\n  rules.reduce((props, rule) => {\n    switch (rule.name) {\n      case ValidationRuleEnum.DateRangeMax:\n        return { ...props, max: rule.value };\n      case ValidationRuleEnum.DateRangeMin:\n        return { ...props, min: rule.value };\n      case ValidationRuleEnum.FileExtensions:\n        return { ...props, accept: rule.value };\n      case ValidationRuleEnum.InputValidation:\n        return {\n          ...props,\n          pattern: patternFor(rule.value as InputValidation),\n        };\n      case ValidationRuleEnum.MaxFileSize:\n      case ValidationRuleEnum.MaxImageHeight:\n      case ValidationRuleEnum.MaxImageWidth:\n        return props;\n      case ValidationRuleEnum.MaxTextLength:\n        return { ...props, maxLength: rule.value };\n      case ValidationRuleEnum.MinTextLength:\n        return { ...props, minLength: rule.value };\n      default:\n        throw new Error(`Unknown rule: ${rule.name}`);\n    }\n  }, {});\n\nexport type Patterns = {\n  [key in InputValidation]: RegExp;\n};\n\n// TODO allow to override patterns\nexport const patterns: Patterns = {\n  alpha: /^[a-zA-Z]+$/,\n  alphanumeric: /^[a-zA-Z0-9]+$/,\n  'alphanumeric-w-space': /^[a-zA-Z0-9 ]+$/,\n  'alphanum-with-spaces': /^[a-zA-Z0-9 ]+$/,\n  email:\n    /^([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9,!#$%&'*+/=?^_`{|}~-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*@([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+(\\.([a-z0-9-]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF])+)*\\.(([a-z]|[\\u00A0-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFEF]){2,})$/i,\n  numeric: /^[0-9]+$/,\n  url: /^((([A-Za-z]{3,9}:(?:\\/\\/)?)(?:[-;:&=+$,\\w]+@)?[A-Za-z0-9.-]+|(?:www\\.|[-;:&=+$,\\w]+@)[A-Za-z0-9.-]+)((?:\\/[+~%/.\\w\\-_]*)?\\??(?:[-+=&;%@.\\w_]*)#?(?:[.!/\\\\\\w]*))?)$/,\n};\n\nconst patternFor = (type: InputValidation): string => {\n  switch (type) {\n    case 'alpha':\n      return patterns.alpha.source;\n    case 'alphanumeric':\n      return patterns.alphanumeric.source;\n    case 'alphanumeric-w-space':\n      return patterns['alphanumeric-w-space'].source;\n    case 'alphanum-with-spaces':\n      return patterns['alphanum-with-spaces'].source;\n    case 'url':\n      return patterns.url.source;\n    case 'numeric':\n      return patterns.numeric.source;\n    case 'email':\n      return patterns.email.source;\n    default:\n      throw new Error(`Unknown validation type: ${type}`);\n  }\n};\n","import { FunctionComponent } from 'preact';\nimport { Skeleton, SkeletonRow } from '@adobe/elsie/components';\n\nexport const FieldsFormSkeleton: FunctionComponent = (props) => {\n  return (\n    <Skeleton {...props}>\n      <SkeletonRow variant=\"heading\" size=\"medium\" />\n      <SkeletonRow variant=\"empty\" size=\"medium\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" fullWidth={true} />\n      <SkeletonRow size=\"large\" fullWidth={true} lines={3} />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n      <SkeletonRow size=\"large\" />\n    </Skeleton>\n  );\n};\n","import { ValidationRule } from '@/checkout/__generated__/types';\nimport { BaseField, validityProps } from '@/checkout/components/FieldsForm';\nimport autocompleteFieldCodes, {\n  fieldCodes,\n} from '@/checkout/utils/autocompleteFieldCodes/autocompleteFieldCodes';\nimport { Field, Input, Picker } from '@adobe/elsie/components';\n\nconst hiddenField = (field: BaseField) => {\n  const { id, addressType, className, code, value, default_value } = field;\n  const fieldID = id || code;\n\n  return (\n    <input\n      className={className}\n      id={`${addressType}-${fieldID}`}\n      key={code}\n      name={code}\n      type=\"hidden\"\n      value={value ?? default_value}\n    />\n  );\n};\n\nconst textField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    error,\n    id,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const validity = validityProps(validate_rules as ValidationRule[]);\n  const fieldID = id || code;\n\n  return (\n    <Field disabled={field.disabled} error={error as string}>\n      <Input\n        aria-label={field.label!}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        className={className}\n        floatingLabel={`${field.label} ${field.is_required ? '*' : ''}`}\n        id={`${addressType}-${fieldID}`}\n        onBlur={onBlur}\n        onChange={onChange}\n        onInvalid={onInvalid}\n        placeholder={field.label!}\n        required={field.is_required || false}\n        type=\"text\"\n        // @ts-ignore\n        name={code}\n        // @ts-ignore\n        value={value ?? undefined}\n        {...validity}\n      />\n    </Field>\n  );\n};\n\nconst multilineField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    id,\n    is_required,\n    label,\n    multiline_count,\n    onBlur,\n    onChange,\n    onInvalid,\n    validate_rules,\n    value,\n  } = field;\n\n  const numOfFields = multiline_count ?? 0;\n  const fieldID = id || code;\n  const validity = validityProps(validate_rules as ValidationRule[]);\n\n  return (\n    <>\n      {Array.from(Array(numOfFields).keys()).map((i) => (\n        <Field\n          disabled={disabled}\n          error={(error as string[])?.[i] || ''}\n          key={`${code}-${i}`}\n          className=\"dropin-field--multiline\"\n        >\n          <Input\n            id={`${addressType}-${fieldID}-${i}`}\n            className={className}\n            floatingLabel={`${label} ${i != 0 ? i : ''} ${\n              is_required && i === 0 ? '*' : ''\n            }`}\n            autocomplete={\n              i === 0 ? autocompleteFieldCodes[code as keyof fieldCodes] : 'off'\n            }\n            aria-label={label!}\n            placeholder={`${label} ${i != 0 ? i : ''}`}\n            type=\"text\"\n            required={is_required && i === 0}\n            onChange={onChange}\n            onBlur={onBlur}\n            onInvalid={onInvalid}\n            // @ts-ignore\n            name={`${code}-${i}`}\n            // @ts-ignore\n            value={(value as string[])?.[i] || undefined}\n            {...validity}\n          />\n        </Field>\n      ))}\n    </>\n  );\n};\n\nconst selectField = (field: BaseField) => {\n  const {\n    addressType,\n    className,\n    code,\n    disabled,\n    error,\n    handleSelect,\n    id,\n    is_required,\n    label,\n    onBlur,\n    onInvalid,\n    options,\n    value,\n  } = field;\n\n  const fieldID = id || code;\n  const handleSelectAttribute = handleSelect ? { handleSelect } : {};\n\n  return (\n    <Field disabled={disabled} error={error as string}>\n      <Picker\n        id={`${addressType}-${fieldID}`}\n        className={className}\n        key={code}\n        name={code}\n        floatingLabel={`${label} ${is_required ? '*' : ''}`}\n        required={is_required}\n        placeholder={label!}\n        aria-label={label!}\n        options={options}\n        value={value as string}\n        autocomplete={autocompleteFieldCodes[code as keyof fieldCodes] || 'off'}\n        onBlur={onBlur}\n        onInvalid={onInvalid}\n        {...handleSelectAttribute}\n      />\n    </Field>\n  );\n};\n\nexport const createField = (field: BaseField) => {\n  switch (field.frontend_input) {\n    case 'BOOLEAN':\n    case 'DATE':\n    case 'DATETIME':\n    case 'FILE':\n    case 'GALLERY':\n    case 'IMAGE':\n    case 'MEDIA_IMAGE':\n    case 'MULTISELECT':\n    case 'PRICE':\n    case 'TEXTAREA':\n    case 'UNDEFINED':\n    case 'WEIGHT':\n      return null;\n    case 'HIDDEN':\n      return hiddenField(field);\n    case 'TEXT':\n      return textField(field);\n    case 'MULTILINE':\n      return multilineField(field);\n    case 'SELECT':\n      return selectField(field);\n    default:\n      throw new Error(`Unknown field type: ${field.frontend_input}`);\n  }\n};\n","import { FunctionComponent, Ref } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { classes } from '@adobe/elsie/lib';\nimport '@/checkout/components/FieldsForm/FieldsForm.css';\nimport { createField } from './fieldFactory';\nimport { Heading } from '@/checkout/components';\nimport { Text } from '@adobe/elsie/i18n';\nimport { ProcessedFormFields } from '@/checkout/utils';\n\nexport type BaseField = ProcessedFormFields[number] & {\n  id?: string;\n  disabled?: boolean;\n  handleSelect?: (event: Event) => void;\n};\n\nexport interface FieldsFormProps extends HTMLAttributes<HTMLDivElement> {\n  headingId: string;\n  name: string;\n  formRef: Ref<HTMLFormElement>;\n  fields: BaseField[];\n}\n\nexport const FieldsForm: FunctionComponent<FieldsFormProps> = ({\n  className,\n  name,\n  headingId,\n  formRef,\n  fields,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['checkout-fields-form', className])}>\n      <Heading\n        level={2}\n        children={<Text id={headingId} />}\n        className=\"checkout-fields-form__title\"\n      />\n\n      <form\n        name={name}\n        ref={formRef}\n        className={classes(['checkout-fields-form__form', className])}\n        noValidate\n      >\n        {fields\n          .sort((a, b) => {\n            return a.sort_order! - b.sort_order!;\n          })\n          .map(createField)}\n      </form>\n    </div>\n  );\n};\n","import { FormFields, getRegions } from '@/checkout/api';\nimport { FieldsFormSkeleton } from '@/checkout/components';\nimport {\n  DefaultValues,\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n  SaveAddressCommand,\n  useAddressForm,\n  usePreselectedFields,\n} from '@/checkout/components/AddressForm';\nimport '@/checkout/components/AddressForm/AddressForm.css';\nimport { FieldsForm as Component } from '@/checkout/components/FieldsForm/FieldsForm';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport {\n  useStore,\n  useAddressFormFields,\n  useCountries,\n} from '@/checkout/context';\nimport {\n  AddressFormFields,\n  AddressFormTypes,\n  AddressFormValues,\n  Region,\n} from '@/checkout/data/models';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty, processFormFields } from '@/checkout/utils';\nimport { getFormErrors } from '@adobe/elsie/lib/form-values';\nimport {\n  HTMLAttributes,\n  forwardRef,\n  useEffect,\n  useImperativeHandle,\n  useRef,\n  useState,\n} from 'preact/compat';\nimport { StateUpdater } from 'preact/hooks';\n\nfunction useDefaultValues(defaultCountry: string | undefined) {\n  const [defaultValues, setDefaultValues] = useState<DefaultValues>({});\n\n  useEffect(() => {\n    if (!defaultCountry) return;\n    setDefaultValues((defaultValues) => ({\n      ...defaultValues,\n      country_id: defaultCountry,\n    }));\n  }, [defaultCountry]);\n\n  return { defaultValues };\n}\n\nfunction useRegions({\n  country,\n  addressType,\n}: {\n  country: string | undefined;\n  addressType: AddressFormTypes;\n}) {\n  const [availableRegions, setAvailableRegions] = useState<Region[]>([]);\n\n  useEffect(() => {\n    if (!country) {\n      setAvailableRegions([]);\n      return;\n    }\n\n    getRegions(country, addressType)\n      .then((data) => {\n        setAvailableRegions(data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [setAvailableRegions, country, addressType]);\n\n  return { availableRegions };\n}\n\nfunction useFormFill({\n  shouldAutoFillForm,\n  addressType,\n  setAddress,\n  fields,\n}: {\n  shouldAutoFillForm?: () => boolean;\n  addressType: AddressFormTypes;\n  setAddress: StateUpdater<AddressFormValues>;\n  fields?: FormFields;\n}) {\n  const [hasFormFillCompleted, setHasFormFillCompleted] = useState(false);\n  const cartData = cartSignal.value.data;\n\n  useEffect(() => {\n    if (hasFormFillCompleted) return;\n\n    const isReadyToProcess = cartData && fields;\n    if (!isReadyToProcess) return;\n\n    setHasFormFillCompleted(true);\n\n    const addressData =\n      addressType === AddressFormTypes.SHIPPING\n        ? cartData?.shippingAddresses\n        : cartData?.billingAddress;\n\n    const isAnAddressList = Array.isArray(addressData);\n    const hasAddressData = isAnAddressList\n      ? addressData.length > 0\n      : !!addressData;\n\n    if (!hasAddressData) return;\n    if (shouldAutoFillForm && !shouldAutoFillForm()) return;\n\n    const isMultiline = (code: string) => {\n      if (!fields) return false;\n      const field = fields.find((field) => field.code === code);\n      if (!field) return false;\n      return field.frontend_input === 'MULTILINE';\n    };\n\n    const firstAddress = Array.isArray(addressData)\n      ? addressData[0]\n      : addressData;\n\n    if (!firstAddress) return;\n\n    const addressFormValues: AddressFormValues = {\n      [AddressFormFields.City]: firstAddress.city,\n      [AddressFormFields.Company]: firstAddress.company || '',\n      [AddressFormFields.Country]: firstAddress.country.value,\n      [AddressFormFields.FirstName]: firstAddress.firstName,\n      [AddressFormFields.LastName]: firstAddress.lastName,\n      [AddressFormFields.PostCode]: firstAddress.postCode || '',\n      [AddressFormFields.Telephone]: firstAddress.telephone || '',\n      [AddressFormFields.Vat]: firstAddress.vatId || '',\n    };\n\n    const region = firstAddress.region;\n\n    if (region) {\n      const regionId = region?.id?.toString();\n\n      if (regionId) {\n        addressFormValues[AddressFormFields.Region] = regionId;\n        addressFormValues[AddressFormFields.RegionId] = regionId;\n      } else {\n        addressFormValues[AddressFormFields.Region] = region.code;\n      }\n    }\n\n    if (firstAddress?.street && firstAddress.street.length > 0) {\n      firstAddress.street.forEach((street, index) => {\n        addressFormValues[\n          `${AddressFormFields.Street}${MULTILINE_SUFFIX}${index}`\n        ] = street!;\n      });\n    }\n\n    const customAttributes = firstAddress?.customAttributes || [];\n\n    customAttributes.forEach((attribute) => {\n      if (!isMultiline(attribute.code)) {\n        addressFormValues[attribute.code] = attribute.value;\n      } else {\n        const values = attribute.value.split(MULTILINE_CUSTOM_ATTR_SPLIT);\n        values.forEach((value, index) => {\n          addressFormValues[`${attribute.code}${MULTILINE_SUFFIX}${index}`] =\n            value;\n        });\n      }\n    });\n\n    setAddress(addressFormValues);\n  }, [\n    setAddress,\n    shouldAutoFillForm,\n    addressType,\n    cartData,\n    fields,\n    hasFormFillCompleted,\n  ]);\n}\n\nexport interface AddressFormProps extends HTMLAttributes<HTMLDivElement> {\n  name: string;\n  preselectedFields?: PreselectedAddressFields;\n  addressType: AddressFormTypes;\n  headingId: string;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n  shouldAutoFillForm?: () => boolean;\n}\n\nexport type AddressFormHandle = {\n  triggerSaveAddress: (\n    signal: AbortSignal\n  ) => Promise<typeof cartSignal.value.data> | undefined;\n};\n\nexport const AddressForm = forwardRef<AddressFormHandle, AddressFormProps>(\n  (\n    {\n      name,\n      preselectedFields,\n      addressType,\n      headingId,\n      saveAddressHandler,\n      children,\n      shouldAutoFillForm,\n      ...props\n    },\n    ref\n  ) => {\n    const { fields } = useAddressFormFields();\n    const { countries: availableCountries } = useCountries();\n    const isLoadingCountries = availableCountries === undefined;\n    const isLoadingFormFields = fields === undefined;\n\n    const { config } = useStore();\n    const isLoadingStoreConfig = config === undefined;\n\n    const { defaultValues } = useDefaultValues(config?.defaultCountry);\n\n    const { preselection } = usePreselectedFields({\n      fields,\n      preselectedFields,\n    });\n\n    const formRef = useRef<HTMLFormElement>(null);\n\n    const {\n      address,\n      setAddress,\n      onSelection,\n      errors,\n      onChange,\n      onInvalid,\n      onBlur,\n    } = useAddressForm({\n      formRef,\n      type: addressType,\n      defaultValues,\n      preselection,\n      saveAddressHandler,\n    });\n\n    const { availableRegions } = useRegions({\n      country: address.country_id,\n      addressType,\n    });\n\n    useImperativeHandle(ref, () => ({\n      triggerSaveAddress: (signal: AbortSignal) => {\n        if (!formRef.current) return;\n        const errors = getFormErrors(formRef.current);\n        if (!isEmpty(errors)) return;\n        return saveAddressHandler({ signal, address });\n      },\n    }));\n\n    useFormFill({\n      shouldAutoFillForm,\n      addressType,\n      setAddress,\n      fields,\n    });\n\n    const isLoading =\n      isLoadingFormFields || isLoadingCountries || isLoadingStoreConfig;\n\n    if (isLoading) {\n      return <FieldsFormSkeleton data-testid={`${addressType}-skeleton`} />;\n    }\n\n    const transformedFields = processFormFields({\n      fields,\n      address,\n      setAddress,\n      addressType,\n      errors,\n      config,\n      availableCountries,\n      availableRegions,\n      onSelection,\n      onChange,\n      onBlur,\n      onInvalid,\n    });\n\n    const typeMapping = {\n      [AddressFormTypes.SHIPPING]: 'shipping',\n      [AddressFormTypes.BILLING]: 'billing',\n    };\n\n    return (\n      <Component\n        {...props}\n        data-testid={`${typeMapping[addressType]}-form`}\n        name={name}\n        className={`checkout-${typeMapping[addressType]}-form`}\n        headingId={headingId}\n        formRef={formRef}\n        fields={transformedFields}\n      />\n    );\n  }\n);\n","import { useCallback, useEffect, useState } from 'preact/hooks';\nimport { useServices } from '@/checkout/context';\nimport { events } from '@adobe/event-bus';\nimport { DEBOUNCE_TIME } from './constants';\nimport {\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models/address-form';\n\nexport function useAddressBackup(addressType: AddressFormTypes) {\n  const { backupService } = useServices();\n  const [addressBackup, setAddressBackup] = useState<AddressFormValues | null>(\n    null\n  );\n\n  // restore address from local storage\n  useEffect(() => {\n    const backup = backupService.restore<AddressFormValues>(addressType);\n    if (!backup) return;\n    setAddressBackup(backup);\n  }, [addressType, backupService]);\n\n  // remove backup when the order is placed\n  useEffect(() => {\n    const onOrder = events.on('checkout/order', () => {\n      backupService.remove(addressType);\n    });\n\n    return () => {\n      onOrder?.off();\n    };\n  }, [addressType, backupService]);\n\n  const backup = useCallback(\n    (address: AddressFormValues) => {\n      return setTimeout(() => {\n        // we do not want to update the state to avoid re-rendering\n        backupService.backup<AddressFormValues>(addressType, address);\n      }, DEBOUNCE_TIME);\n    },\n    [addressType, backupService]\n  );\n\n  const removeBackup = useCallback(() => {\n    backupService.remove(addressType);\n  }, [addressType, backupService]);\n\n  return { addressBackup, backup, removeBackup };\n}\n","import { useCallback, useState } from 'preact/hooks';\n\nexport type Translations = {\n  badInput: string;\n  patternMismatch: string;\n  rangeOverflow: string;\n  rangeUnderflow: string;\n  tooLong: string;\n  tooShort: string;\n  typeMismatch: string;\n  valueMissing: string;\n};\n\ntype FormElement = HTMLInputElement | HTMLSelectElement;\n\ntype Constraint =\n  | 'badInput'\n  | 'patternMismatch'\n  | 'rangeOverflow'\n  | 'rangeUnderflow'\n  | 'tooLong'\n  | 'tooShort'\n  | 'typeMismatch'\n  | 'valueMissing';\n\ntype Attribute = 'aria-label' | 'maxlength' | 'minlength' | 'min' | 'max';\n\nconst attributesMapping: Record<Constraint, Attribute> = {\n  badInput: 'aria-label',\n  patternMismatch: 'aria-label',\n  rangeOverflow: 'max',\n  rangeUnderflow: 'min',\n  tooLong: 'maxlength',\n  tooShort: 'minlength',\n  typeMismatch: 'aria-label',\n  valueMissing: 'aria-label',\n};\n\nconst constraints: Constraint[] = [\n  'badInput',\n  'patternMismatch',\n  'rangeOverflow',\n  'rangeUnderflow',\n  'tooLong',\n  'tooShort',\n  'typeMismatch',\n  'valueMissing',\n];\n\nexport const useValidity = (translations: Translations) => {\n  const [errors, setErrors] = useState<Record<string, string>>({});\n\n  const validateFormElement = useCallback(\n    (formElement: FormElement) => {\n      const { name, validity, validationMessage } = formElement;\n\n      let error = validity.valid ? '' : validationMessage;\n\n      constraints.forEach((constraint) => {\n        if (!validity[constraint]) return;\n        const translation = translations[constraint];\n        if (!translation) return;\n        const attribute = attributesMapping[constraint];\n        error = translation.replace(\n          '{field}',\n          formElement.getAttribute(attribute) || ''\n        );\n      });\n\n      setErrors((prevErrors) => ({ ...prevErrors, [name]: error }));\n    },\n    [translations]\n  );\n\n  return {\n    errors,\n    validateFormElement,\n  };\n};\n","import { PreselectedMappedField } from '@/checkout/components/AddressForm';\nimport { DEBOUNCE_TIME } from '@/checkout/components/AddressForm/constants';\nimport { useAddressBackup } from '@/checkout/components/AddressForm/useAddressBackup';\nimport {\n  AddressFormErrors,\n  AddressFormTypes,\n  AddressFormValues,\n} from '@/checkout/data/models';\nimport {\n  Translations as ValidityTranslations,\n  useValidity,\n} from '@/checkout/hooks/useValidity';\nimport { cartSignal } from '@/checkout/signals';\nimport { isEmpty } from '@/checkout/utils';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getFormErrors } from '@adobe/elsie/lib';\nimport { RefObject } from 'preact';\nimport { useCallback, useEffect, useRef, useState } from 'preact/hooks';\n\nexport type DefaultValues = {\n  country_id?: string;\n};\n\nexport type AddressFormState = {\n  address: AddressFormValues;\n  errors: AddressFormErrors;\n};\n\nexport type SaveAddressCommand = {\n  signal?: AbortSignal;\n  address: AddressFormValues;\n};\n\nexport type UseAddressFormProps = {\n  formRef: RefObject<HTMLFormElement>;\n  type: AddressFormTypes;\n  defaultValues?: DefaultValues;\n  preselection?: PreselectedMappedField | null;\n  saveAddressHandler: (\n    command: SaveAddressCommand\n  ) => Promise<typeof cartSignal.value.data>;\n};\n\nconst isFormValid = (formRef: RefObject<HTMLFormElement>): boolean => {\n  const form = formRef.current;\n  if (!form) return false;\n  const errors = getFormErrors(form);\n  return isEmpty(errors);\n};\n\nexport const useAddressForm = ({\n  formRef,\n  type,\n  defaultValues = {},\n  preselection = {},\n  saveAddressHandler,\n}: UseAddressFormProps) => {\n  const translations = useText({\n    badInput: 'Checkout.AddressForm.Validity.badInput',\n    patternMismatch: 'Checkout.AddressForm.Validity.patternMismatch',\n    rangeUnderflow: 'Checkout.AddressForm.Validity.rangeUnderflow',\n    tooLong: 'Checkout.AddressForm.Validity.tooLong',\n    tooShort: 'Checkout.AddressForm.Validity.tooShort',\n    typeMismatch: 'Checkout.AddressForm.Validity.typeMismatch',\n    valueMissing: 'Checkout.AddressForm.Validity.valueMissing',\n  }) as ValidityTranslations;\n\n  const hasUnsavedChanges = useRef(false);\n  const [address, setAddress] = useState<AddressFormValues>({});\n\n  const { addressBackup, backup, removeBackup } = useAddressBackup(type);\n\n  const { errors, validateFormElement } = useValidity(translations);\n\n  const saveAddressForm = useCallback(\n    (command: SaveAddressCommand) => {\n      hasUnsavedChanges.current = false;\n      saveAddressHandler(command)\n        .then(() => {\n          removeBackup();\n        })\n        .catch((error) => {\n          hasUnsavedChanges.current = true;\n          console.error('Saving address form failed:', error);\n        });\n    },\n    [removeBackup, saveAddressHandler]\n  );\n\n  const updateField = (code: string, value: string) => {\n    setAddress((prevAddress) => ({\n      ...prevAddress,\n      [code]: value,\n    }));\n    hasUnsavedChanges.current = true;\n  };\n\n  const onChange = (event: Event) => {\n    const target = event.target as HTMLInputElement;\n    const { name, value } = target;\n\n    updateField(name, value);\n\n    validateFormElement(target);\n  };\n\n  const onInvalid = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    validateFormElement(target);\n  };\n\n  const onSelection = (event: Event) => {\n    const target = event.target as HTMLSelectElement;\n    const { name, value } = target;\n    updateField(name, value);\n    validateFormElement(target);\n  };\n\n  const onBlur = (event: Event) => {\n    const target = event.target as HTMLInputElement | HTMLSelectElement;\n\n    target.checkValidity();\n  };\n\n  // load default, preselected and backup address\n  useEffect(() => {\n    setAddress((prevAddress) => {\n      return {\n        ...defaultValues,\n        ...preselection,\n        ...addressBackup,\n        ...prevAddress,\n      };\n    });\n  }, [defaultValues, preselection, addressBackup]);\n\n  // backup address\n  useEffect(() => {\n    if (!hasUnsavedChanges.current) return;\n    const timerId = backup(address);\n    return () => {\n      clearTimeout(timerId);\n    };\n  }, [address, backup]);\n\n  // sync address with the backend\n  useEffect(() => {\n    if (!hasUnsavedChanges.current || !isFormValid(formRef)) return;\n\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    const timer = setTimeout(() => {\n      saveAddressForm({ signal, address });\n    }, DEBOUNCE_TIME);\n\n    return () => {\n      clearTimeout(timer);\n      controller.abort();\n    };\n  }, [address, formRef, saveAddressForm]);\n\n  return {\n    address,\n    setAddress,\n    errors,\n    onChange,\n    onSelection,\n    onBlur,\n    onInvalid,\n  };\n};\n","import { FormFields } from '@/checkout/api';\nimport { PreselectedAddressFields } from '@/checkout/containers';\nimport { useMemo } from 'preact/hooks';\n\ntype PreselectedFieldKey = keyof PreselectedAddressFields;\n\nexport type PreselectedMappedField = {\n  country_id?: string;\n  region?: string;\n  postcode?: string;\n};\n\ntype PreselectedMappedFieldKey = keyof PreselectedMappedField;\n\nconst FIELD_CODE_MAPPING: {\n  [key in PreselectedFieldKey]: PreselectedMappedFieldKey;\n} = {\n  countryCode: 'country_id',\n  region: 'region',\n  postCode: 'postcode',\n};\n\nexport type UsePreselectedFieldsProps = {\n  fields?: FormFields;\n  preselectedFields?: PreselectedAddressFields;\n};\n\nexport function usePreselectedFields({\n  fields,\n  preselectedFields,\n}: UsePreselectedFieldsProps) {\n  const preselection =\n    useMemo(() => {\n      const hasFields = !!fields && fields.length > 0;\n      const hasPreselectedFields = !!preselectedFields;\n\n      if (!hasFields || !hasPreselectedFields) return null;\n\n      return Object.keys(preselectedFields).reduce((acc, code) => {\n        const formCode = FIELD_CODE_MAPPING[code as PreselectedFieldKey];\n        if (!formCode) return acc;\n\n        const formField = fields.some((field) => field.code === formCode);\n        if (!formField) return acc;\n\n        return {\n          ...acc,\n          [formCode]: preselectedFields[code as PreselectedFieldKey],\n        };\n      }, {} as PreselectedMappedField);\n    }, [fields, preselectedFields]);\n\n  return { preselection };\n}\n","import { useEffect, useState } from 'preact/hooks';\n\nexport const useBreakpoint = () => {\n  const getBreakpoint = () => {\n    if (window.innerWidth >= 1920) return 'xxlarge';\n    if (window.innerWidth >= 1366) return 'xlarge';\n    if (window.innerWidth >= 1024) return 'large';\n    if (window.innerWidth >= 768) return 'medium';\n\n    return 'small';\n  };\n\n  const [breakpoint, setBreakpoint] = useState<\n    ReturnType<typeof getBreakpoint>\n  >(getBreakpoint());\n\n  useEffect(() => {\n    let timeoutId: ReturnType<typeof setTimeout>;\n\n    const handleResize = () => {\n      if (timeoutId) clearTimeout(timeoutId);\n      timeoutId = setTimeout(() => setBreakpoint(getBreakpoint()), 50);\n    };\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n      if (timeoutId) clearTimeout(timeoutId);\n    };\n  }, []);\n\n  return breakpoint;\n};\n","import { Heading } from '@/checkout/components';\nimport { useBreakpoint } from '@/checkout/hooks/useBreakpoint';\nimport { Text } from '@adobe/elsie/i18n';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\n\nimport '@/checkout/components/Checkout/Checkout.css';\n\nconst ConditionalWrapper: FunctionComponent<{\n  children?: VNode;\n  className: string;\n}> = ({ children, className }) => {\n  const breakpoint = useBreakpoint();\n  if (breakpoint === 'small') return <>{children}</>;\n  return <div className={className}>{children}</div>;\n};\n\nexport type AsideSections = {\n  cartSummary: VNode;\n  orderSummary: VNode;\n};\n\nconst Aside: FunctionComponent<{ sections: AsideSections }> = ({\n  sections,\n}) => {\n  return (\n    <ConditionalWrapper className=\"checkout__aside\">\n      <>\n        <VComponent node={sections.orderSummary} />\n        <VComponent node={sections.cartSummary} />\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport type MainSections = {\n  billingAddress: VNode;\n  billToShippingAddress?: VNode;\n  login: VNode;\n  paymentMethods: VNode;\n  placeOrder: VNode;\n  shippingAddress?: VNode;\n  shippingMethods?: VNode;\n};\n\nconst MainContent: FunctionComponent<MainSections> = ({\n  billingAddress,\n  billToShippingAddress,\n  login,\n  paymentMethods,\n  placeOrder,\n  shippingAddress,\n  shippingMethods,\n}) => {\n  return (\n    <>\n      <VComponent node={login} />\n      {shippingAddress && <VComponent node={shippingAddress} />}\n      {billToShippingAddress && <VComponent node={billToShippingAddress} />}\n      {shippingMethods && <VComponent node={shippingMethods} />}\n      <VComponent node={paymentMethods} />\n      <VComponent node={billingAddress} />\n      <VComponent node={placeOrder} />\n    </>\n  );\n};\n\nconst Main: FunctionComponent<{\n  outOfStock?: VNode;\n  sections?: MainSections;\n}> = ({ outOfStock, sections }) => {\n  return (\n    <ConditionalWrapper className=\"checkout__main\">\n      <>\n        <Heading level={1} className=\"checkout-title\">\n          <Text id=\"Checkout.title\" />\n        </Heading>\n\n        {outOfStock && (\n          <VComponent className=\"checkout-outOfStock\" node={outOfStock} />\n        )}\n\n        {sections && <MainContent {...sections} />}\n      </>\n    </ConditionalWrapper>\n  );\n};\n\nexport interface CheckoutProps extends HTMLAttributes<HTMLDivElement> {\n  banner?: VNode;\n}\n\ninterface CheckoutComponent extends FunctionComponent<CheckoutProps> {\n  Main: typeof Main;\n  Aside: typeof Aside;\n}\n\nexport const Checkout: CheckoutComponent = (props) => {\n  const { banner, className, children, ...restProps } = props;\n\n  return (\n    <div className={classes(['checkout', className])} {...restProps}>\n      {banner && <VComponent className=\"checkout__banner\" node={banner} />}\n      <div className=\"checkout__content\">{children}</div>\n    </div>\n  );\n};\n\nCheckout.Main = Main;\nCheckout.Aside = Aside;\n","import { FunctionComponent } from 'preact';\nimport { HTMLAttributes, JSX } from 'preact/compat';\nimport '@/checkout/components/Heading/Heading.css';\n\nexport interface HeadingProps extends Omit<HTMLAttributes<HTMLHeadingElement>, 'level'> {\n  level?: 1 | 2 | 3 | 4 | 5 | 6;\n}\n\nexport const Heading: FunctionComponent<HeadingProps> = ({\n  className,\n  children,\n  level = 2,\n}) => {\n  const Heading =\n    level >= 1 && level <= 6\n      ? (`h${level}` as keyof JSX.IntrinsicElements)\n      : 'h2';\n\n  return (\n      <Heading className={className}>\n        {children}\n      </Heading>\n  );\n};\n"],"names":["getFormErrors","form","formData","FormData","data","Object","fromEntries","result","entries","reduce","key","field","elements","validationMessage","autocompleteFieldCodes","firstname","lastname","company","country","region","city","postcode","telephone","street","email","middlename","prefix","suffix","isEmpty","obj","keys","length","constructor","isValidOption","option","label","value","transformFormFieldOptions","filter","map","text","transformRegionOptions","regions","id","toString","code","name","transformCountryOptions","countries","processFormFields","fields","address","setAddress","addressType","errors","config","availableCountries","availableRegions","onSelection","onChange","onBlur","onInvalid","resetRegion","AddressFormFields","Region","RegionId","syncRegionId","regionId","is_required","inputType","frontend_input","options","error","handleSelect","disabled","getMultilineValues","Country","AddressFormTypes","SHIPPING","regionsSignal","event","target","country_code","selectedRegionId","pending","countriesWithRequiredRegion","includes","country_id","displayStateIfOptional","AttributeFrontendInputEnum","Undefined","Select","Text","selectedRegion","region_id","defaultOnChange","region_name","find","regionOption","PostCode","countriesWithOptionalZipCode","className","estimateShipppingTimer","refetchEstimatedShippingMethods","criteria","cartData","cartSignal","hasCartData","firstAddress","shippingAddresses","availableShippingMethods","clearTimeout","setTimeout","cartId","DEBOUNCE_TIME","validityProps","rules","props","rule","ValidationRuleEnum","DateRangeMax","max","DateRangeMin","min","FileExtensions","accept","InputValidation","pattern","patternFor","MaxFileSize","MaxImageHeight","MaxImageWidth","MaxTextLength","maxLength","MinTextLength","minLength","Error","patterns","alpha","alphanumeric","numeric","url","type","source","FieldsFormSkeleton","_jsxs","Skeleton","children","_jsx","SkeletonRow","variant","size","fullWidth","lines","hiddenField","default_value","fieldID","textField","validate_rules","validity","Field","Input","autocomplete","floatingLabel","placeholder","required","undefined","multilineField","multiline_count","numOfFields","_Fragment","Array","from","i","selectField","handleSelectAttribute","Picker","createField","FieldsForm","headingId","formRef","classes","Heading","level","ref","noValidate","sort","a","b","sort_order","useDefaultValues","defaultCountry","defaultValues","setDefaultValues","useState","useEffect","useRegions","setAvailableRegions","getRegions","then","catch","console","useFormFill","shouldAutoFillForm","hasFormFillCompleted","setHasFormFillCompleted","isReadyToProcess","addressData","billingAddress","isAnAddressList","isArray","hasAddressData","isMultiline","addressFormValues","City","Company","FirstName","firstName","LastName","lastName","postCode","Telephone","Vat","vatId","forEach","index","Street","MULTILINE_SUFFIX","customAttributes","attribute","values","split","MULTILINE_CUSTOM_ATTR_SPLIT","AddressForm","forwardRef","preselectedFields","saveAddressHandler","useAddressFormFields","useCountries","isLoadingCountries","isLoadingFormFields","useStore","isLoadingStoreConfig","preselection","usePreselectedFields","useRef","useAddressForm","useImperativeHandle","triggerSaveAddress","signal","current","isLoading","transformedFields","typeMapping","BILLING","Component","useAddressBackup","backupService","useServices","addressBackup","setAddressBackup","backup","restore","onOrder","events","on","remove","off","useCallback","removeBackup","attributesMapping","badInput","patternMismatch","rangeOverflow","rangeUnderflow","tooLong","tooShort","typeMismatch","valueMissing","constraints","useValidity","translations","setErrors","validateFormElement","formElement","valid","constraint","translation","replace","getAttribute","prevErrors","isFormValid","useText","hasUnsavedChanges","saveAddressForm","command","updateField","prevAddress","checkValidity","timerId","controller","AbortController","timer","abort","FIELD_CODE_MAPPING","countryCode","useMemo","hasFields","hasPreselectedFields","acc","formCode","formField","some","useBreakpoint","getBreakpoint","window","innerWidth","breakpoint","setBreakpoint","timeoutId","handleResize","addEventListener","removeEventListener","ConditionalWrapper","Aside","sections","VComponent","node","orderSummary","cartSummary","MainContent","billToShippingAddress","login","paymentMethods","placeOrder","shippingAddress","shippingMethods","Main","outOfStock","Checkout","banner","restProps"],"mappings":"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"}
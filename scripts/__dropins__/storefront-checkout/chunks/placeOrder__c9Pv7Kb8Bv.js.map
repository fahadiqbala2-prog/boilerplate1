{"version":3,"file":"placeOrder__c9Pv7Kb8Bv.js","sources":["../../src/api/getCheckoutData/getCheckoutData.ts","../../src/api/getStockStatus/graphql/getStockStatus.graphql.ts","../../src/api/getStockStatus/getStockStatus.ts","../../src/api/placeOrder/graphql/placeOrder.graphql.ts","../../src/utils/storefrontEvents/completeCheckout.ts","../../src/api/placeOrder/placeOrder.ts"],"sourcesContent":["import { MissingCart } from '@/checkout/api/errors';\nimport { getCheckoutDataQuery } from '@/checkout/api/getCheckoutData/graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformCart } from '@/checkout/data/transforms/transform-cart';\n\nexport const getCheckoutData = async (cartId: string) => {\n  if (!cartId) throw new MissingCart();\n\n  return await dispatchApiCall({\n    type: 'query',\n    query: getCheckoutDataQuery,\n    options: { method: 'POST', cache: 'no-cache', variables: { cartId } },\n    path: 'cart',\n    signalType: 'cart',\n    transformer: transformCart,\n  });\n};\n","export const getStockStatusQuery = /* GraphQL */ `\n  query getStockStatus($cartId: String!) {\n    cart(cart_id: $cartId) {\n      id\n      items {\n        __typename\n        uid\n        product {\n          uid\n          name\n          sku\n          stock_status\n          only_x_left_in_stock\n          ... on ConfigurableProduct {\n            variants {\n              attributes {\n                uid\n              }\n              product {\n                uid\n                stock_status\n              }\n            }\n          }\n          ... on BundleProduct {\n            items {\n              uid\n              options {\n                uid\n                product {\n                  uid\n                }\n              }\n            }\n          }\n        }\n        quantity\n        ... on ConfigurableCartItem {\n          configurable_options {\n            configurable_product_option_uid\n            option_label\n            configurable_product_option_value_uid\n            value_label\n          }\n        }\n        ... on BundleCartItem {\n          bundle_options {\n            uid\n            values {\n              uid\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n","import {\n  BundleCartItem,\n  BundleProduct,\n  Cart,\n  ConfigurableCartItem,\n  ConfigurableProduct,\n  DownloadableCartItem,\n  GiftCardCartItem,\n  ProductInterface,\n  ProductStockStatus,\n  SimpleCartItem,\n  VirtualCartItem,\n} from '@/checkout/__generated__/types';\nimport { fetchGraphQl } from '@/checkout/api';\nimport { FetchError, MissingCart } from '@/checkout/api/errors';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport { getStockStatusQuery } from './graphql/getStockStatus.graphql';\n\ninterface StockChecker {\n  (item: CartItem): boolean;\n}\n\ntype StockStatusOutput = {\n  cart: Pick<Cart, 'id' | 'items'>;\n};\n\ntype CartItem =\n  | BundleCartItem\n  | ConfigurableCartItem\n  | DownloadableCartItem\n  | GiftCardCartItem\n  | SimpleCartItem\n  | VirtualCartItem;\n\nconst isProductInStock = (product: ProductInterface): boolean => {\n  return product.stock_status === ProductStockStatus.InStock;\n};\n\nconst simpleStockChecker: StockChecker = (item) => {\n  return isProductInStock(item.product);\n};\n\nconst configStockChecker: StockChecker = (item) => {\n  const { configurable_options: options } = item as ConfigurableCartItem;\n  const { variants } = item.product as ConfigurableProduct;\n\n  if (!variants || !options) return false;\n\n  const selectedOptions = options.map(\n    (option) => option?.configurable_product_option_value_uid\n  );\n\n  const selectedVariant = variants.find((variant) => {\n    if (!variant || !variant.attributes) return false;\n\n    return variant.attributes.every(\n      (attribute) => attribute && selectedOptions.includes(attribute.uid)\n    );\n  });\n\n  // if no matching variant is found, we assume the product is out of stock\n  if (!selectedVariant) return false;\n\n  const { product: variantProduct } = selectedVariant;\n\n  if (!variantProduct) return false;\n\n  return isProductInStock(variantProduct);\n};\n\nconst bundleStockChecker: StockChecker = (item) => {\n  const { product } = item as BundleCartItem;\n\n  if (!isProductInStock(product)) return false;\n\n  // if any of the items inside the bundle is ouf of stock, it will not be part of this list\n  const { bundle_options: options } = item as BundleCartItem;\n  const { items: bundle } = product as BundleProduct;\n\n  return bundle?.length === options?.length;\n};\n\nconst getStockChecker = (type?: string): StockChecker => {\n  switch (type) {\n    case 'ConfigurableCartItem':\n      return configStockChecker;\n    case 'BundleCartItem':\n      return bundleStockChecker;\n    default:\n      return simpleStockChecker;\n  }\n};\n\nconst isOutOfStock = (item: CartItem) => {\n  const checker = getStockChecker(item.__typename);\n  return checker(item) === false;\n};\n\nexport const getStockStatus = async (\n  cartId: string\n): Promise<ProductStockStatus> => {\n  if (!cartId) throw new MissingCart();\n\n  const { data, errors } = await fetchGraphQl<StockStatusOutput>(\n    getStockStatusQuery,\n    { method: 'GET', cache: 'no-cache', variables: { cartId } }\n  ).catch(handleNetworkError);\n\n  if (errors) throw new FetchError(errors);\n\n  const cartItems = data?.cart?.items;\n\n  if (!cartItems || !cartItems.length) return ProductStockStatus.InStock;\n\n  const outOfStock = cartItems.filter((item) => {\n    if (!item) return false;\n    return isOutOfStock(item as CartItem);\n  });\n\n  return outOfStock.length > 0\n    ? ProductStockStatus.OutOfStock\n    : ProductStockStatus.InStock;\n};\n","export const placeOrderMutation = /* GraphQL */ `\n  mutation placeOrder($cartId: String!) {\n    placeOrder(input: { cart_id: $cartId }) {\n      orderV2 {\n        number\n        token\n      }\n    }\n  }\n`;\n","import { cartSignal } from '@/checkout/signals';\nimport { CartTaxItem } from '@/checkout/__generated__/types';\nimport {\n  ConfigurableOption,\n  Order,\n  ShoppingCart,\n  ShoppingCartItem,\n} from '@/checkout/types/CompleteCheckoutContextSchemas';\nimport { Cart } from '@/checkout/data/models/cart';\nimport { Item, ItemKind } from '@/checkout/data/models/cart-item';\nimport { ShippingMethod } from '@/checkout/data/models';\n\nfunction mapConfigurableOptions(\n  options: Record<string, string>\n): ConfigurableOption[] | undefined {\n  const result: ConfigurableOption[] = [];\n\n  for (const key in options) {\n    if (options[key] === null) continue;\n\n    result.push({\n      optionLabel: key,\n      valueLabel: options[key],\n    });\n  }\n\n  return result;\n}\n\nfunction mapCartItems(items: Item[]): ShoppingCartItem[] {\n  return items.map((item: Item): ShoppingCartItem => {\n    const { uid, name, sku, price, quantity } = item;\n\n    let cartItem: ShoppingCartItem = {\n      /* We don't know if Checkout drop-in can apply Manufacturerâ€™s Suggested Retail Price */\n      canApplyMsrp: true,\n      formattedPrice: '',\n      id: uid,\n      prices: {\n        price: {\n          value: price.value ?? 0,\n          currency: price.currency ?? '',\n        },\n      },\n      product: {\n        /* productId not exposed by core GraphQL as number (uid is string) */\n        productId: 0,\n        name,\n        sku,\n        productType: item.kind,\n        canonicalUrl: item.url || '',\n        mainImageUrl: item?.image?.src || '',\n      },\n      quantity,\n    };\n\n    if (item.kind === ItemKind.Configurable) {\n      cartItem.configurableOptions =\n        // @ts-ignore\n        mapConfigurableOptions(item.configurableOptions);\n    }\n\n    return cartItem;\n  }, []);\n}\n\n/**\n * This function builds the ShoppingCart context.\n * It maps the shopping cart data collected during the checkout process to the\n * specific schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {CheckoutData} cart The cart data collected during the checkout process.\n * @returns {ShoppingCart} The ShoppingCart data formated.\n */\nfunction buildShoppingCartContext(cart: Cart): ShoppingCart {\n  const { id, items, prices, totalQty } = cart;\n  const hasItems = !!items?.length;\n\n  let shoppingCartContext: ShoppingCart = {\n    id,\n    prices: {\n      subtotalExcludingTax: {\n        value: prices?.subtotal_excluding_tax?.value ?? 0,\n        currency: prices?.subtotal_excluding_tax?.currency ?? '',\n      },\n      subtotalIncludingTax: {\n        value: prices?.subtotal_including_tax?.value ?? 0,\n        currency: prices?.subtotal_including_tax?.currency ?? '',\n      },\n    },\n    totalQuantity: totalQty,\n    possibleOnepageCheckout: true,\n  };\n\n  if (hasItems) {\n    shoppingCartContext.items = mapCartItems(items);\n  }\n\n  return shoppingCartContext;\n}\n\nfunction calculateTaxes(taxes: (CartTaxItem | null)[]): number {\n  const totalTaxAmount = taxes.reduce(\n    (total, tax) => total + tax!.amount.value!,\n    0\n  );\n\n  return totalTaxAmount;\n}\n\nfunction buildShippingMethod(method: ShippingMethod) {\n  return {\n    shippingMethod: `${method.carrier.code}_${method.code}`,\n    shippingAmount: method.amount.value ?? 0,\n  };\n}\n\n/**\n * This function builds the Order context.\n * It maps the order data collected during the checkout process to the specific\n * schema format defined by the Adobe Commerce Events SDK.\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @param {Cart} cart The cart data collected during the checkout process.\n * @returns {Order} The Order data formated.\n */\nfunction buildOrderContext(orderId: string, cart: Cart): Order {\n  const { coupons, email, prices, selectedPaymentMethod, shippingAddresses } =\n    cart;\n  const hasAddresses = !!shippingAddresses?.length;\n\n  let orderContext: Order = {\n    appliedCouponCode: coupons[0]?.code ?? '',\n    email: email ?? '',\n    grandTotal: prices?.grand_total?.value ?? 0,\n    orderId,\n    orderType: 'checkout',\n    otherTax: 0,\n    paymentMethodCode: selectedPaymentMethod?.code ?? '',\n    paymentMethodName: selectedPaymentMethod?.title ?? '',\n    payments: [\n      /* By now the Checkout drop-in is only supporting one payment method */\n      {\n        paymentMethodCode: selectedPaymentMethod?.code ?? '',\n        paymentMethodName: selectedPaymentMethod?.title ?? '',\n        total: prices?.grand_total?.value ?? 0,\n      },\n    ],\n    salesTax: calculateTaxes(prices?.applied_taxes ?? []),\n    subtotalExcludingTax: prices?.subtotal_excluding_tax?.value ?? 0,\n    subtotalIncludingTax: prices?.subtotal_including_tax?.value ?? 0,\n  };\n\n  if (hasAddresses) {\n    const firstAddress = shippingAddresses[0];\n    const selectedShippingMethod = firstAddress?.selectedShippingMethod;\n\n    if (selectedShippingMethod) {\n      orderContext.shipping = buildShippingMethod(selectedShippingMethod);\n    }\n  }\n\n  return orderContext;\n}\n\n/**\n * This function sets both ShoppingCart and Order contexts to the ACDL before\n * firing the \"place-order\" event.\n * This code has been extracted from the ContextManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  ContextManager.ts::setShoppingCart(context: ShoppingCart): void\n *  ContextManager.ts::setOrder(context: Order): void\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * ContextManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/ContextManager.ts\n */\nfunction setContext(orderId: string): void {\n  const { data } = cartSignal.value;\n\n  const shoppingCartContext = buildShoppingCartContext(data!);\n  const orderContext = buildOrderContext(orderId, data!);\n\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  // First of all it deletes the previously added data layer context entries\n  window.adobeDataLayer.push(\n    { shoppingCartContext: null },\n    { orderContext: null }\n  );\n\n  // and finally it adds the specific data layer context entries for that request\n  window.adobeDataLayer.push({ shoppingCartContext }, { orderContext });\n}\n\n/**\n * This function publishes the \"place-order\" event pushing it to the ACDL (a\n * plain JavaScript Array that serves as a queue).\n * This code has been extracted from the PublishManager class (included into\n * the Adobe Commerce Events SDK package) and adapted in order to use directly\n * the ACDL own API methods.\n *\n * Code based on:\n *  PublishManager.ts::placeOrder(context?: CustomContext): void\n *\n * @returns {void}\n *\n * PublishManager class @see https://github.com/adobe/commerce-events/blob/main/packages/storefront-events-sdk/src/PublishManager.ts\n */\nfunction publishPlaceOrderEvent(): void {\n  window.adobeDataLayer = window.adobeDataLayer || [];\n\n  /*global AdobeClientDataLayer */\n  /*eslint no-undef: \"error\"*/\n  window.adobeDataLayer.push((acdl: AdobeClientDataLayer) => {\n    const state = acdl.getState() || {};\n\n    acdl.push({\n      event: 'place-order',\n      eventInfo: {\n        ...state,\n      },\n    });\n  });\n}\n\n/**\n * \"completeCheckout\" is a Commerce event available when it's installed the\n * Data Connection extension. The data this event collects is sent to the Adobe\n * Experience Platform edge.\n *\n * This is a Storefront event that collects anonymized behavioral data from the\n * shoppers as they browse the site. The data this event collects can be used\n * to create promotions and campaigns targeted to a specific set of shoppers.\n * Storefront event data includes simple and configurable products only.\n *\n * \"completeCheckout\" is triggered when the shopper places an order.\n *\n * The code access directly the Adobe Client Data Layer (ACDL) package instead\n * of using the Adobe Commerce Events SDK package, because the ACDL reduces the\n * effort to instrument websites by providing a standardized method to expose\n * and access any kind of data for any script. It consists of a JavaScript\n * client-side event-driven data store that can be used on web pages:\n *\n * - to collect data about what the visitors experience on the web page\n * - to communicate this data to digital analytics and reporting servers\n *\n * @param {string} orderId The order ID generated when placed the order.\n * @returns {void}\n *\n * Data Connection Events documentation @see https://experienceleague.adobe.com/docs/commerce-merchant-services/data-connection/event-forwarding/events.html?lang=en#completecheckout\n * Adobe Commerce Events SDK GitHub repo @see https://github.com/adobe/commerce-events\n * Adobe Client Data Layer documentation @see https://github.com/adobe/adobe-client-data-layer/wiki\n * Adobe Client Data Layer GitHub repo @see https://github.com/adobe/adobe-client-data-layer\n */\nexport function completeCheckout(orderId: string): void {\n  setContext(orderId);\n  publishPlaceOrderEvent();\n}\n","import { PlaceOrderMutation } from '@/checkout/__generated__/types';\nimport {\n  FetchError,\n  MissingCart,\n  UnexpectedError,\n} from '@/checkout/api/errors';\nimport { fetchGraphQl } from '@/checkout/api/fetch-graphql';\nimport { placeOrderMutation } from '@/checkout/api/placeOrder/graphql';\nimport { handleNetworkError } from '@/checkout/lib/network-error';\nimport { completeCheckout } from '@/checkout/utils/storefrontEvents';\nimport { events } from '@adobe/event-bus';\nimport { FetchQueryError } from '@adobe/fetch-graphql';\n\nfunction handleErrors(errors: FetchQueryError) {\n  const isFetchError = errors.every((error) => error.extensions?.category);\n\n  if (isFetchError) throw new FetchError(errors);\n\n  throw new UnexpectedError(errors[0].message);\n}\n\nexport const placeOrder = async (cartId: string) => {\n  if (!cartId) throw new MissingCart();\n\n  const { data, errors } = await fetchGraphQl<PlaceOrderMutation>(\n    placeOrderMutation,\n    {\n      variables: { cartId },\n    }\n  ).catch(handleNetworkError)\n\n  if (errors) handleErrors(errors);\n\n  const order = data.placeOrder!.orderV2;\n\n  completeCheckout(order!.number);\n\n  // Reset the cart after the order is placed\n  events.emit('cart/reset', undefined); \n  // Emit the order to the checkout/order event\n  events.emit('checkout/order', order); \n};\n"],"names":["getCheckoutData","cartId","MissingCart","dispatchApiCall","type","query","getCheckoutDataQuery","options","method","cache","variables","path","signalType","transformer","transformCart","getStockStatusQuery","isProductInStock","product","stock_status","ProductStockStatus","InStock","simpleStockChecker","item","configStockChecker","configurable_options","variants","selectedOptions","map","option","configurable_product_option_value_uid","selectedVariant","find","variant","attributes","every","attribute","includes","uid","variantProduct","bundleStockChecker","bundle_options","items","bundle","length","getStockChecker","isOutOfStock","checker","__typename","getStockStatus","data","errors","fetchGraphQl","catch","handleNetworkError","FetchError","cartItems","cart","outOfStock","filter","OutOfStock","placeOrderMutation","mapConfigurableOptions","result","key","push","optionLabel","valueLabel","mapCartItems","name","sku","price","quantity","cartItem","canApplyMsrp","formattedPrice","id","prices","value","currency","productId","productType","kind","canonicalUrl","url","mainImageUrl","image","src","ItemKind","Configurable","configurableOptions","buildShoppingCartContext","totalQty","hasItems","shoppingCartContext","subtotalExcludingTax","subtotal_excluding_tax","subtotalIncludingTax","subtotal_including_tax","totalQuantity","possibleOnepageCheckout","calculateTaxes","taxes","totalTaxAmount","reduce","total","tax","amount","buildShippingMethod","shippingMethod","carrier","code","shippingAmount","buildOrderContext","orderId","coupons","email","selectedPaymentMethod","shippingAddresses","hasAddresses","orderContext","appliedCouponCode","grandTotal","grand_total","orderType","otherTax","paymentMethodCode","paymentMethodName","title","payments","salesTax","applied_taxes","firstAddress","selectedShippingMethod","shipping","setContext","cartSignal","adobeDataLayer","window","publishPlaceOrderEvent","acdl","state","getState","event","eventInfo","completeCheckout","handleErrors","isFetchError","error","extensions","category","UnexpectedError","message","placeOrder","order","orderV2","number","emit","undefined"],"mappings":"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"}
{"version":3,"file":"setShippingAddress__CdHM-xbfLj.js","sources":["../../src/utils/parseRegionId/parseRegionId.ts","../../src/api/setShippingAddress/graphql/setShippingAddress.graphql.ts","../../src/api/setShippingAddress/setShippingAddress.ts"],"sourcesContent":["const NUMERIC_ID_REGEX = /^\\d+$/;\n\nexport const parseRegionId = (regionId: string) =>  {\n  const isId = NUMERIC_ID_REGEX.test(regionId);\n  if (!isId) return;\n  return parseInt(regionId, 10);\n}\n","import {\n  CHECKOUT_DATA_FRAGMENT,\n  CART_SUMMARY_FRAGMENT,\n} from '@/checkout/api/getCheckoutData/graphql/getCheckoutData.graphql';\n\nexport const setShippingAddressMutation = /* GraphQL */ `\n  mutation setShippingAddress($cartId: String!, $address: CartAddressInput!) {\n    setShippingAddressesOnCart(\n      input: { cart_id: $cartId, shipping_addresses: [{ address: $address }] }\n    ) {\n      cart {\n        id\n        ...CheckoutData\n        ...CartSummaryItems\n      }\n    }\n  }\n  ${CHECKOUT_DATA_FRAGMENT}\n  ${CART_SUMMARY_FRAGMENT}\n`;\n","import {\n  MULTILINE_CUSTOM_ATTR_SPLIT,\n  MULTILINE_SUFFIX,\n} from '@/checkout/components/AddressForm/constants';\nimport { getMultilineValues, parseRegionId } from '@/checkout/utils';\nimport { setShippingAddressMutation } from './graphql/setShippingAddress.graphql';\nimport { dispatchApiCall } from '@/checkout/api/utils/dispatchApiCall';\nimport { transformCart } from '@/checkout/data/transforms';\nimport { AddressFormFields } from '@/checkout/data/models/address-form';\n\nexport const STANDARD_ATTRIBUTES = [\n  'city',\n  'company',\n  'country_code',\n  'firstname',\n  'lastname',\n  'postcode',\n  'region',\n  'region_id',\n  'save_in_address_book',\n  'street',\n  'telephone',\n  'vat_id',\n];\n\nexport interface AddressInput {\n  city: string;\n  company?: string;\n  country_code: string;\n  custom_attributes?: {\n    attribute_code: string;\n    value?: string;\n    selected_options?: { uid: string; value: string }[];\n  }[];\n  firstname: string;\n  lastname: string;\n  postcode?: string;\n  region?: string;\n  region_id?: number;\n  save_in_address_book?: boolean;\n  street: string[];\n  telephone?: string;\n  vat_id?: string;\n}\n\nexport interface setShippingAddressParams {\n  cartId: string;\n  address: AddressInput;\n  signal?: AbortSignal;\n}\n\n/*\n  Region and Region_id are mutually exclusive.\n  If region_id is set, region is ignored.\n\n  Region could be required for some countries, but not for others. It is required if the country_id is in\n  the store configuration \"countries_with_required_region\"\n\n  If region is optional and the store configuration \"display_state_if_optional\" is set to true, the region field\n  will be displayed as a text input if there is no country.available_regions is empty. If it is set to false,\n  the region field will be hidden.\n*/\n\nexport const prepareAddress = (formFields: Record<string, any>) => {\n  const address: AddressInput = {\n    city: formFields[AddressFormFields.City],\n    company: formFields[AddressFormFields.Company],\n    country_code: formFields[AddressFormFields.Country],\n    firstname: formFields[AddressFormFields.FirstName],\n    lastname: formFields[AddressFormFields.LastName],\n    postcode: formFields[AddressFormFields.PostCode],\n    save_in_address_book: !formFields[AddressFormFields.SaveInAddressBook],\n    street: getMultilineValues(AddressFormFields.Street, formFields),\n    telephone: formFields[AddressFormFields.Telephone],\n    vat_id: formFields[AddressFormFields.Vat],\n  };\n\n  const region = formFields[AddressFormFields.Region];\n  const regionId = parseRegionId(region);\n\n  if (!regionId) {\n    address.region = region;\n  } else {\n    address.region_id = regionId;\n  }\n\n  const custom_attributes = Object.keys(formFields)\n    .filter((key) => !key.startsWith('street'))\n    .filter((key) => !STANDARD_ATTRIBUTES.includes(key))\n    .filter((key) => key !== 'country_id')\n    .map((key) => {\n      const [code, multiline] = key.split(MULTILINE_SUFFIX);\n      if (!multiline) return { attribute_code: code, value: formFields[key] };\n      const value = getMultilineValues(code, formFields).join(\n        MULTILINE_CUSTOM_ATTR_SPLIT\n      );\n      return { attribute_code: code, value };\n    });\n\n  // it is possible to have duplicated multiline custom attributes\n  const without_duplicates = custom_attributes.filter(\n    (item, index, self) =>\n      index === self.findIndex((t) => t.attribute_code === item.attribute_code)\n  );\n\n  if (without_duplicates.length > 0) {\n    address.custom_attributes = without_duplicates;\n  }\n\n  return address;\n};\n\nexport const setShippingAddress = async ({\n  signal,\n  cartId,\n  address,\n}: setShippingAddressParams) => {\n  return await dispatchApiCall({\n    type: 'mutation',\n    query: setShippingAddressMutation,\n    options: { signal, variables: { cartId, address } },\n    path: 'setShippingAddressesOnCart.cart',\n    signalType: 'cart',\n    transformer: transformCart,\n  });\n};\n"],"names":["NUMERIC_ID_REGEX","parseRegionId","regionId","isId","test","parseInt","setShippingAddressMutation","CHECKOUT_DATA_FRAGMENT","CART_SUMMARY_FRAGMENT","STANDARD_ATTRIBUTES","prepareAddress","formFields","address","city","AddressFormFields","City","company","Company","country_code","Country","firstname","FirstName","lastname","LastName","postcode","PostCode","save_in_address_book","SaveInAddressBook","street","getMultilineValues","Street","telephone","Telephone","vat_id","Vat","region","Region","region_id","custom_attributes","Object","keys","filter","key","startsWith","includes","map","code","multiline","split","MULTILINE_SUFFIX","attribute_code","value","join","MULTILINE_CUSTOM_ATTR_SPLIT","without_duplicates","item","index","self","findIndex","t","length","setShippingAddress","signal","cartId","dispatchApiCall","type","query","options","variables","path","signalType","transformer","transformCart"],"mappings":";;;;;AAAA,MAAMA,mBAAmB;AAEZC,MAAAA,gBAAgBA,CAACC,aAAsB;AAC5CC,QAAAA,OAAOH,iBAAiBI,KAAKF,QAAQ;AAC3C,MAAI,CAACC;AAAM;AACJE,SAAAA,SAASH,UAAU,EAAE;AAC9B;ACDaI,MAAAA;AAAAA;AAAAA,EAA4C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAYrDC,sBAAuB;AAAA,IACvBC,qBAAsB;AAAA;AAAA;ACRnB,MAAMC,sBAAsB,CACjC,QACA,WACA,gBACA,aACA,YACA,YACA,UACA,aACA,wBACA,UACA,aACA,QAAQ;AAyCGC,MAAAA,iBAAiBA,CAACC,eAAoC;AACjE,QAAMC,UAAwB;AAAA,IAC5BC,MAAMF,WAAWG,kBAAkBC,IAAI;AAAA,IACvCC,SAASL,WAAWG,kBAAkBG,OAAO;AAAA,IAC7CC,cAAcP,WAAWG,kBAAkBK,OAAO;AAAA,IAClDC,WAAWT,WAAWG,kBAAkBO,SAAS;AAAA,IACjDC,UAAUX,WAAWG,kBAAkBS,QAAQ;AAAA,IAC/CC,UAAUb,WAAWG,kBAAkBW,QAAQ;AAAA,IAC/CC,sBAAsB,CAACf,WAAWG,kBAAkBa,iBAAiB;AAAA,IACrEC,QAAQC,mBAAmBf,kBAAkBgB,QAAQnB,UAAU;AAAA,IAC/DoB,WAAWpB,WAAWG,kBAAkBkB,SAAS;AAAA,IACjDC,QAAQtB,WAAWG,kBAAkBoB,GAAG;AAAA,EAAA;AAGpCC,QAAAA,SAASxB,WAAWG,kBAAkBsB,MAAM;AAC5ClC,QAAAA,WAAWD,cAAckC,MAAM;AAErC,MAAI,CAACjC,UAAU;AACbU,YAAQuB,SAASA;AAAAA,EAAAA,OACZ;AACLvB,YAAQyB,YAAYnC;AAAAA,EACtB;AAEMoC,QAAAA,oBAAoBC,OAAOC,KAAK7B,UAAU,EAC7C8B,OAAQC,CAAAA,QAAQ,CAACA,IAAIC,WAAW,QAAQ,CAAC,EACzCF,OAAQC,CAAAA,QAAQ,CAACjC,oBAAoBmC,SAASF,GAAG,CAAC,EAClDD,OAAQC,CAAAA,QAAQA,QAAQ,YAAY,EACpCG,IAAKH,CAAQ,QAAA;AACZ,UAAM,CAACI,MAAMC,SAAS,IAAIL,IAAIM,MAAMC,gBAAgB;AACpD,QAAI,CAACF;AAAkB,aAAA;AAAA,QAAEG,gBAAgBJ;AAAAA,QAAMK,OAAOxC,WAAW+B,GAAG;AAAA,MAAA;AACpE,UAAMS,QAAQtB,mBAAmBiB,MAAMnC,UAAU,EAAEyC,KACjDC,2BACF;AACO,WAAA;AAAA,MAAEH,gBAAgBJ;AAAAA,MAAMK;AAAAA,IAAAA;AAAAA,EAAM,CACtC;AAGH,QAAMG,qBAAqBhB,kBAAkBG,OAC3C,CAACc,MAAMC,OAAOC,SACZD,UAAUC,KAAKC,UAAWC,CAAMA,MAAAA,EAAET,mBAAmBK,KAAKL,cAAc,CAC5E;AAEII,MAAAA,mBAAmBM,SAAS,GAAG;AACjChD,YAAQ0B,oBAAoBgB;AAAAA,EAC9B;AAEO1C,SAAAA;AACT;AAEO,MAAMiD,qBAAqB,OAAO;AAAA,EACvCC;AAAAA,EACAC;AAAAA,EACAnD;AACwB,MAAM;AAC9B,SAAO,MAAMoD,gBAAgB;AAAA,IAC3BC,MAAM;AAAA,IACNC,OAAO5D;AAAAA,IACP6D,SAAS;AAAA,MAAEL;AAAAA,MAAQM,WAAW;AAAA,QAAEL;AAAAA,QAAQnD;AAAAA,MAAQ;AAAA,IAAE;AAAA,IAClDyD,MAAM;AAAA,IACNC,YAAY;AAAA,IACZC,aAAaC;AAAAA,EAAAA,CACd;AACH;"}
{"version":3,"file":"getEstimateShipping__Bin9bPsMEq.js","sources":["../../src/api/getEstimateShipping/graphql/estimateShippingMethodsMutation.ts","../../src/api/getEstimateShipping/graphql/countriesAndRegionsQueries.ts","../../src/api/getEstimateShipping/getEstimateShipping.ts"],"sourcesContent":["export const ESTIMATE_SHIPPING_METHODS_MUTATION = `\n  mutation ESTIMATE_SHIPPING_METHODS_MUTATION(\n    $cartId: String!\n    $address: EstimateAddressInput!\n  ) {\n    estimateShippingMethods(\n      input: {\n        cart_id: $cartId\n        address: $address\n      }\n    ) {\n      amount {\n        currency\n        value\n      }\n      error_message\n    }\n  }\n`;\n","export const COUNTRIES_QUERY = `\nquery COUNTRIES_QUERY {\n  countries {\n    label: full_name_locale\n    id\n  }\n  storeConfig {\n    defaultCountry: default_country\n  }\n}\n`;\n\nexport const REGIONS_QUERY = `\nquery REGIONS_QUERY($id: String) {\n  country(id: $id) {\n    available_regions {\n      code\n\t\t\tname\n    }\n  }\n}\n`;\n\nexport type CountryData = {\n  label: string;\n  id: string;\n  available_regions?: Array<{\n    code: string;\n    name: string;\n  }>;\n  isDefaultCountry?: boolean\n};\n","import { state } from '@/cart/lib/state';\nimport { fetchGraphQl } from '@/cart/api';\nimport { handleFetchError } from '@/cart/lib/fetch-error';\n\nimport { ESTIMATE_SHIPPING_METHODS_MUTATION } from './graphql/estimateShippingMethodsMutation';\nimport {\n  COUNTRIES_QUERY,\n  CountryData,\n  REGIONS_QUERY,\n} from './graphql/countriesAndRegionsQueries';\n\nexport interface EstimateAddressInput {\n  countryCode: string;\n  postcode?: string;\n  region?: {\n    code?: string;\n  };\n}\n\nexport const getEstimateShipping = async (\n  address: EstimateAddressInput\n): Promise<any | null> => {\n  const cartId = state.cartId;\n\n  if (!cartId) throw new Error('No cart ID found');\n  if (!address) throw new Error('No address parameter found');\n\n  const { countryCode, postcode, region } = address;\n\n  return fetchGraphQl(ESTIMATE_SHIPPING_METHODS_MUTATION, {\n    variables: {\n      cartId,\n      address: {\n        country_code: countryCode || 'US',\n        postcode: postcode || '',\n        region: {\n          region_code: region?.code || '',\n        },\n      },\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const estimateShippingMethods: Array<any> = data.estimateShippingMethods;\n\n    if (estimateShippingMethods.length === 0) {\n      return null;\n    }\n\n    return estimateShippingMethods.find((method) => !method.error_message);\n  });\n};\n\nexport const getCountries = async (): Promise<[CountryData]> => {\n  return fetchGraphQl(COUNTRIES_QUERY, {}).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const sortedCountries =\n      data?.countries?.sort((a: any, b: any) =>\n        a.label.localeCompare(b.label)\n      ) || [];\n\n    const defaultCountry = data?.storeConfig?.defaultCountry || 'US';\n\n    // Set the default country property\n    sortedCountries.forEach((country: any) => {\n      country.isDefaultCountry = country.id === defaultCountry;\n    });\n\n    return sortedCountries;\n  });\n};\n\nexport const getRegions = async (\n  countryId: string\n): Promise<Array<{ code: string; name: string }>> => {\n  return fetchGraphQl(REGIONS_QUERY, {\n    variables: {\n      id: countryId,\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    return data?.country?.available_regions || [];\n  });\n};\n"],"names":["ESTIMATE_SHIPPING_METHODS_MUTATION","COUNTRIES_QUERY","REGIONS_QUERY","getEstimateShipping","address","cartId","state","Error","countryCode","postcode","region","fetchGraphQl","variables","country_code","region_code","code","then","errors","data","handleFetchError","estimateShippingMethods","length","find","method","error_message","getCountries","sortedCountries","countries","sort","a","b","label","localeCompare","defaultCountry","storeConfig","forEach","country","isDefaultCountry","id","getRegions","countryId","available_regions"],"mappings":";;AAAO,MAAMA,qCAAsC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACA5C,MAAMC,kBAAmB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYzB,MAAMC,gBAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;ACOjBC,MAAAA,sBAAsB,OACjCC,YACwB;AACxB,QAAMC,SAASC,MAAMD;AAErB,MAAI,CAACA;AAAc,UAAA,IAAIE,MAAM,kBAAkB;AAC/C,MAAI,CAACH;AAAe,UAAA,IAAIG,MAAM,4BAA4B;AAEpD,QAAA;AAAA,IAAEC;AAAAA,IAAaC;AAAAA,IAAUC;AAAAA,EAAWN,IAAAA;AAE1C,SAAOO,aAAaX,oCAAoC;AAAA,IACtDY,WAAW;AAAA,MACTP;AAAAA,MACAD,SAAS;AAAA,QACPS,cAAcL,eAAe;AAAA,QAC7BC,UAAUA,YAAY;AAAA,QACtBC,QAAQ;AAAA,UACNI,cAAaJ,iCAAQK,SAAQ;AAAA,QAC/B;AAAA,MACF;AAAA,IACF;AAAA,EAAA,CACD,EAAEC,KAAK,CAAC;AAAA,IAAEC;AAAAA,IAAQC;AAAAA,EAAAA,MAAW;AACxBD,QAAAA;AAAQ,aAAOE,iBAAiBF,MAAM;AAE1C,UAAMG,0BAAsCF,KAAKE;AAE7CA,QAAAA,wBAAwBC,WAAW,GAAG;AACjC,aAAA;AAAA,IACT;AAEA,WAAOD,wBAAwBE,KAAMC,CAAW,WAAA,CAACA,OAAOC,aAAa;AAAA,EAAA,CACtE;AACH;AAEO,MAAMC,eAAe,YAAoC;AAC9D,SAAOd,aAAaV,iBAAiB,EAAE,EAAEe,KAAK,CAAC;AAAA,IAAEC;AAAAA,IAAQC;AAAAA,EAAAA,MAAW;;AAC9DD,QAAAA;AAAQ,aAAOE,iBAAiBF,MAAM;AAE1C,UAAMS,oBACJR,kCAAMS,cAANT,mBAAiBU,KAAK,CAACC,GAAQC,MAC7BD,EAAEE,MAAMC,cAAcF,EAAEC,KAAK,OAC1B,CAAA;AAEDE,UAAAA,mBAAiBf,kCAAMgB,gBAANhB,mBAAmBe,mBAAkB;AAG5CE,oBAAAA,QAAQ,CAACC,YAAiB;AAChCC,cAAAA,mBAAmBD,QAAQE,OAAOL;AAAAA,IAAAA,CAC3C;AAEMP,WAAAA;AAAAA,EAAAA,CACR;AACH;AAEaa,MAAAA,aAAa,OACxBC,cACmD;AACnD,SAAO7B,aAAaT,eAAe;AAAA,IACjCU,WAAW;AAAA,MACT0B,IAAIE;AAAAA,IACN;AAAA,EAAA,CACD,EAAExB,KAAK,CAAC;AAAA,IAAEC;AAAAA,IAAQC;AAAAA,EAAAA,MAAW;;AACxBD,QAAAA;AAAQ,aAAOE,iBAAiBF,MAAM;AAEnCC,aAAAA,kCAAMkB,YAANlB,mBAAeuB,sBAAqB;EAAE,CAC9C;AACH;"}
{"version":3,"file":"api.js","sources":["../src/api/addProductsToCart/graphql/AddProductsToCartMutation.ts","../src/api/addProductsToCart/addProductsToCart.ts","../src/api/createEmptyCart/graphql/CreateCartMutation.ts","../src/api/createEmptyCart/createEmptyCart.ts"],"sourcesContent":["import { CART_FRAGMENT, CART_ITEMS_PAGINATION_ARGUMENTS } from '@/cart/api/graphql/CartFragment';\n\nexport const ADD_PRODUCTS_TO_CART_MUTATION = `\n  mutation ADD_PRODUCTS_TO_CART_MUTATION(\n      $cartId: String!, \n      $cartItems: [CartItemInput!]!,\n      ${CART_ITEMS_PAGINATION_ARGUMENTS}\n    ) {\n    addProductsToCart(\n      cartId: $cartId\n      cartItems: $cartItems\n    ) {\n      cart {\n        ...CartFragment\n      }\n      user_errors {\n        code\n        message\n      }\n    }\n  }\n  ${CART_FRAGMENT}\n`;\n","import { fetchGraphQl, createEmptyCart } from '@/cart/api';\nimport { state } from '@/cart/lib/state';\nimport { CartModel } from '@/cart/data/models';\nimport { transformCart } from '@/cart/data/transforms';\nimport { events } from '@adobe/event-bus';\nimport { handleFetchError } from '@/cart/lib/fetch-error';\n\nimport { ADD_PRODUCTS_TO_CART_MUTATION } from './graphql/AddProductsToCartMutation';\nimport { publishCartUpdateEvents, publishOpenCartEvent } from '@/cart/lib/acdl';\n\nexport const addProductsToCart = async (\n  items: {\n    sku: string;\n    parentSku?: string;\n    quantity: number;\n    optionsUIDs?: string[];\n    enteredOptions?: { uid: string; value: string }[];\n  }[]\n): Promise<CartModel | null> => {\n  let isNewCart = false;\n\n  const cartId =\n    state.cartId ||\n    (await createEmptyCart().then((id) => {\n      isNewCart = true;\n      return id;\n    }));\n\n  return fetchGraphQl(ADD_PRODUCTS_TO_CART_MUTATION, {\n    variables: {\n      cartId,\n      cartItems: items.map(\n        ({\n          sku,\n          parentSku: parent_sku,\n          quantity,\n          optionsUIDs: selected_options,\n          enteredOptions: entered_options,\n        }) => ({\n          sku,\n          parent_sku,\n          quantity,\n          selected_options,\n          entered_options,\n        })\n      ),\n    },\n  }).then(({ errors, data }) => {\n    if (errors) return handleFetchError(errors);\n\n    const payload = transformCart(data.addProductsToCart.cart);\n\n    events.emit('cart/updated', payload);\n    events.emit('cart/data', payload);\n\n    if (payload) {\n      const updatedItems = payload.items.filter((item) =>\n        items.some(({ sku }) => sku === item.sku)\n      );\n      if (isNewCart) {\n        // Publish open cart event when the first item is added to the cart\n        publishOpenCartEvent(payload, updatedItems, state.locale || 'en-US');\n      } else {\n        // Otherwise publish cart update events\n        publishCartUpdateEvents(payload, updatedItems, state.locale || 'en-US');\n      }\n    }\n\n    return payload;\n  });\n};\n","export const CREATE_EMPTY_CART_MUTATION = `\n    mutation CREATE_EMPTY_CART_MUTATION {\n        createEmptyCart\n    }\n`;\n","import { config, fetchGraphQl } from '@/cart/api';\nimport { state } from '@/cart/lib/state';\n\nimport { CREATE_EMPTY_CART_MUTATION } from './graphql/CreateCartMutation';\n\nexport const createEmptyCart = async () => {\n  const { disableGuestCart } = config.getConfig();\n\n  // If guest cart is disabled, throw an error\n  if (disableGuestCart) {\n    throw new Error('Guest cart is disabled');\n  }\n\n  // Return new empty cart id\n  return await fetchGraphQl(CREATE_EMPTY_CART_MUTATION).then(({ data }) => {\n    const cartId = data.createEmptyCart;\n\n    // Set cart id in state\n    state.cartId = cartId;\n\n    return cartId;\n  });\n};\n"],"names":["ADD_PRODUCTS_TO_CART_MUTATION","CART_ITEMS_PAGINATION_ARGUMENTS","CART_FRAGMENT","addProductsToCart","items","isNewCart","cartId","state","createEmptyCart","then","id","fetchGraphQl","variables","cartItems","map","sku","parentSku","parent_sku","quantity","optionsUIDs","selected_options","enteredOptions","entered_options","errors","data","handleFetchError","payload","transformCart","cart","emit","updatedItems","filter","item","some","publishOpenCartEvent","locale","publishCartUpdateEvents","CREATE_EMPTY_CART_MUTATION","disableGuestCart","config","getConfig","Error"],"mappings":";;;;;;;AAEO,MAAMA,gCAAiC;AAAA;AAAA;AAAA;AAAA,QAItCC,+BAAgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAepCC,aAAc;AAAA;ACXLC,MAAAA,oBAAoB,OAC/BC,UAO8B;AAC9B,MAAIC,YAAY;AAEhB,QAAMC,SACJC,MAAMD,UACL,MAAME,kBAAkBC,KAAMC,CAAO,OAAA;AACxB,gBAAA;AACLA,WAAAA;AAAAA,EAAAA,CACR;AAEH,SAAOC,aAAaX,+BAA+B;AAAA,IACjDY,WAAW;AAAA,MACTN;AAAAA,MACAO,WAAWT,MAAMU,IACf,CAAC;AAAA,QACCC;AAAAA,QACAC,WAAWC;AAAAA,QACXC;AAAAA,QACAC,aAAaC;AAAAA,QACbC,gBAAgBC;AAAAA,MAAAA,OACX;AAAA,QACLP;AAAAA,QACAE;AAAAA,QACAC;AAAAA,QACAE;AAAAA,QACAE;AAAAA,MAAAA,EAEJ;AAAA,IACF;AAAA,EAAA,CACD,EAAEb,KAAK,CAAC;AAAA,IAAEc;AAAAA,IAAQC;AAAAA,EAAAA,MAAW;AACxBD,QAAAA;AAAQ,aAAOE,iBAAiBF,MAAM;AAE1C,UAAMG,UAAUC,cAAcH,KAAKrB,kBAAkByB,IAAI;AAElDC,WAAAA,KAAK,gBAAgBH,OAAO;AAC5BG,WAAAA,KAAK,aAAaH,OAAO;AAEhC,QAAIA,SAAS;AACX,YAAMI,eAAeJ,QAAQtB,MAAM2B,OAAQC,CACzC5B,SAAAA,MAAM6B,KAAK,CAAC;AAAA,QAAElB;AAAAA,MAAUA,MAAAA,QAAQiB,KAAKjB,GAAG,CAC1C;AACA,UAAIV,WAAW;AAEb6B,6BAAqBR,SAASI,cAAcvB,MAAM4B,UAAU,OAAO;AAAA,MAAA,OAC9D;AAELC,gCAAwBV,SAASI,cAAcvB,MAAM4B,UAAU,OAAO;AAAA,MACxE;AAAA,IACF;AAEOT,WAAAA;AAAAA,EAAAA,CACR;AACH;ACtEO,MAAMW,6BAA8B;AAAA;AAAA;AAAA;AAAA;ACKpC,MAAM7B,kBAAkB,YAAY;AACnC,QAAA;AAAA,IAAE8B;AAAAA,EAAAA,IAAqBC,OAAOC;AAGpC,MAAIF,kBAAkB;AACd,UAAA,IAAIG,MAAM,wBAAwB;AAAA,EAC1C;AAGA,SAAO,MAAM9B,aAAa0B,0BAA0B,EAAE5B,KAAK,CAAC;AAAA,IAAEe;AAAAA,EAAAA,MAAW;AACvE,UAAMlB,SAASkB,KAAKhB;AAGpBD,UAAMD,SAASA;AAERA,WAAAA;AAAAA,EAAAA,CACR;AACH;"}
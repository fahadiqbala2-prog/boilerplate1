{"version":3,"file":"Cart.js","sources":["../../src/components/Cart/Cart.tsx","../../src/hooks/useEstimatedShipping.ts","../../src/containers/Cart/Cart.tsx"],"sourcesContent":["import { FunctionComponent, VNode } from 'preact';\nimport { HTMLAttributes } from 'preact/compat';\nimport { VComponent, classes } from '@adobe/elsie/lib';\nimport { Divider } from '@adobe/elsie/components';\n\nimport '@/cart/components/Cart/Cart.css';\n\nexport interface CartProps extends HTMLAttributes<HTMLDivElement> {\n  emptyCart: VNode;\n  heading?: VNode;\n  products?: VNode;\n  priceSummary?: VNode<HTMLAttributes<HTMLElement>>;\n}\n\nexport const Cart: FunctionComponent<CartProps> = ({\n  className,\n  children,\n  emptyCart,\n  heading,\n  products,\n  priceSummary,\n  ...props\n}) => {\n  return (\n    <div {...props} className={classes(['cart-cart', className])}>\n      <div className={classes(['cart-cart__wrapper'])}>\n        {/* Heading */}\n        {heading && (\n          <div\n            className={classes([\n              'cart-cart__heading',\n              ['cart-cart__heading--full-width', !products || !priceSummary],\n            ])}\n          >\n            <VComponent node={heading} className=\"cart-cart__heading-text\" />\n\n            <Divider\n              variant=\"primary\"\n              className={classes(['cart-cart__heading-divider'])}\n            />\n          </div>\n        )}\n\n        {/* Content */}\n        <div\n          className={classes([\n            'cart-cart__content',\n            ['cart-cart__content--empty', !products],\n            ['cart-cart__content--full-width', !priceSummary],\n          ])}\n        >\n          {products || (\n            <VComponent node={emptyCart} className=\"cart-cart__empty-cart\" />\n          )}\n        </div>\n        {products && priceSummary && (\n          <VComponent\n            node={priceSummary}\n            className={classes(['cart-cart__price-summary'])}\n          />\n        )}\n      </div>\n    </div>\n  );\n};\n","import { useCallback, useEffect, useState } from 'preact/compat';\n\nimport {\n  EstimateAddressInput,\n  getCountries,\n  getEstimateShipping,\n  getRegions,\n} from '@/cart/api';\nimport { PriceProps } from '@adobe/elsie/components';\n\nexport const useEstimatedShipping = () => {\n  /* State data related to estimating costs in the Price Summary component */\n  const [countries, setCountries] = useState<{ text: string; value: string }[]>(\n    []\n  );\n  const [selectedCountry, setSelectedCountry] = useState<string>('US');\n  const [selectedRegion, setSelectedRegion] = useState<string>('');\n  const [selectedZip, setSelectedZip] = useState<string>('');\n  const [regions, setRegions] = useState<{ text: string; value: string }[]>([]);\n  const [regionsLoading, setRegionsLoading] = useState<boolean>(false);\n  const [estimatedShippingPrice, setEstimatedShippingPrice] =\n    useState<PriceProps | null>();\n  const [estimatedDestinationText, setEstimatedDestinationText] =\n    useState<string>('');\n  const [priceSummaryLoading, setPriceSummaryLoading] =\n    useState<boolean>(false);\n\n  const handleEstimateShipping = useCallback(\n      (formValues: {\n        shippingCountry: string;\n        shippingState?: string;\n        shippingZip?: string;\n      }) => {\n        const {\n          shippingCountry,\n          shippingState = '',\n          shippingZip = '',\n        } = formValues;\n\n        const addressData: EstimateAddressInput = {\n          countryCode: shippingCountry,\n          postcode: shippingZip,\n          region: {\n            code: shippingState,\n          },\n        };\n\n        setPriceSummaryLoading(true);\n\n        getEstimateShipping(addressData)\n          .then((data) => {\n            if (data) {\n              setEstimatedShippingPrice({\n                amount: data.amount.value,\n                currency: data.amount.currency,\n              });\n\n              setSelectedCountry(shippingCountry);\n              setSelectedRegion(shippingState);\n              setSelectedZip(shippingZip);\n\n              setEstimatedDestinationText(\n                shippingState || shippingZip || shippingCountry\n              );\n            }\n          })\n          .finally(() => {\n            setPriceSummaryLoading(false);\n          });\n      },\n    []\n  );\n\n  const handleCountrySelected = (event: Event) => {\n    event.preventDefault();\n\n    setSelectedRegion('');\n    setSelectedZip('');\n\n    const value = (event.target as HTMLSelectElement).value;\n    setSelectedCountry(value);\n  };\n\n  // Get list of countries on initial load\n  useEffect(() => {\n    getCountries().then((countries) => {\n      let defaultCountry = 'US';\n      const transformedCountries = countries.map((country) => {\n        if (country.isDefaultCountry) {\n          defaultCountry = country.id;\n        }\n        return {\n          text: country.label,\n          value: country.id,\n        };\n      });\n      setCountries(transformedCountries);\n      setSelectedCountry(defaultCountry);\n    });\n  }, []);\n\n  // Update regions when country is updated\n  useEffect(() => {\n    setRegionsLoading(true);\n    getRegions(selectedCountry)\n      .then((regions) => {\n        const transformedRegions = regions.map((region) => {\n          return {\n            text: region.name,\n            value: region.code,\n          };\n        });\n        setRegions(transformedRegions);\n      })\n      .finally(() => {\n        setRegionsLoading(false);\n      });\n  }, [selectedCountry, setRegionsLoading]);\n\n  return {\n    loading: priceSummaryLoading,\n    regionsLoading,\n    estimatedDestinationText,\n    countries,\n    selectedCountry,\n    selectedRegion,\n    selectedZip,\n    regions,\n    estimatedShippingPrice,\n    handleEstimateShipping,\n    handleCountrySelected,\n  };\n};\n","import { HTMLAttributes, useEffect, useState } from 'preact/compat';\nimport { Container } from '@adobe/elsie/lib';\nimport { events } from '@adobe/event-bus';\nimport { CartModel } from '@/cart/data/models';\nimport {\n  Button,\n  CartItem,\n  CartList,\n  Input,\n  Image,\n  Picker,\n  Price,\n  PriceSummary,\n} from '@adobe/elsie/components';\nimport { Cart as CartComponent, EmptyCart } from '@/cart/components';\nimport { updateProductsFromCart } from '@/cart/api';\nimport { useText } from '@adobe/elsie/i18n';\nimport { getPersistedData } from '@/cart/lib/persisted-data';\n\nimport { publishShoppingCartViewEvent } from '@/cart/lib/acdl';\nimport { state } from '@/cart/lib/state';\nimport { useEstimatedShipping } from '@/cart/hooks';\n\ninterface CheckoutRouteContext {\n  cartId: string;\n}\nexport interface CartProps extends HTMLAttributes<HTMLDivElement> {\n  // Links\n  routeProduct?: (item: CartModel['items'][0]) => string;\n  routeEmptyCartCTA?: () => string;\n  routeCheckout?: (context: CheckoutRouteContext) => string;\n}\n\nexport const Cart: Container<CartProps, CartModel | null> = ({\n  children,\n  initialData = null,\n  routeProduct,\n  routeEmptyCartCTA,\n  routeCheckout,\n  ...props\n}) => {\n  const [data, setData] = useState<CartModel | null>(initialData);\n  const [itemsLoading, setItemLoading] = useState<Set<string>>(new Set());\n\n  const {\n    loading: priceSummaryLoading,\n    regionsLoading,\n    countries,\n    regions,\n    selectedCountry,\n    selectedRegion,\n    selectedZip,\n    estimatedDestinationText,\n    estimatedShippingPrice,\n    handleCountrySelected,\n    handleEstimateShipping,\n  } = useEstimatedShipping();\n\n  const handleItemsLoading = (state: boolean, uid: string) => {\n    setItemLoading((prev) => {\n      state ? prev.add(uid) : prev.delete(uid);\n      return new Set(prev);\n    });\n  };\n\n  const handleItemQuantityUpdate = (uid: string, quantity: number) => {\n    handleItemsLoading(true, uid);\n\n    updateProductsFromCart([{ uid, quantity }]).finally(() => {\n      handleItemsLoading(false, uid);\n    });\n  };\n\n  const dictionary = useText({\n    applyButton: 'Cart.PriceSummary.estimatedShippingForm.apply.label',\n    checkout: 'Cart.PriceSummary.checkout',\n    countryField: 'Cart.PriceSummary.estimatedShippingForm.country.placeholder',\n    discountedPrice: 'Cart.CartItem.discountedPrice',\n    download: 'Cart.CartItem.download',\n    freeShipping: 'Cart.PriceSummary.freeShipping',\n    heading: 'Cart.Cart.heading',\n    message: 'Cart.CartItem.message',\n    regularPrice: 'Cart.CartItem.regularPrice',\n    recipient: 'Cart.CartItem.recipient',\n    sender: 'Cart.CartItem.sender',\n    stateField: 'Cart.PriceSummary.estimatedShippingForm.state.placeholder',\n    taxToBeDetermined: 'Cart.PriceSummary.taxToBeDetermined',\n    zipField: 'Cart.PriceSummary.estimatedShippingForm.zip.placeholder',\n    file: 'Cart.CartItem.file',\n    files: 'Cart.CartItem.files',\n  });\n\n  // Subscribe to cart data events\n  useEffect(() => {\n    const event = events.on(\n      'cart/data',\n      (payload) => {\n        setData(payload as CartModel);\n\n        const shippingAddress = payload?.addresses?.shipping?.[0];\n\n        if (shippingAddress) {\n          const { countryCode, regionCode, zipCode } = shippingAddress;\n          handleEstimateShipping({\n            shippingCountry: countryCode,\n            shippingState: regionCode,\n            shippingZip: zipCode,\n          });\n        }\n      },\n      { eager: true }\n    );\n\n    return () => {\n      event?.off();\n    };\n  }, [handleEstimateShipping]);\n\n  // Publish shopping cart view event only once when the component is mounted and initialData is available\n  useEffect(() => {\n    if (initialData && Object.keys(initialData).length > 0) {\n      publishShoppingCartViewEvent(initialData, state.locale || 'en-US');\n    }\n  }, [initialData]);\n\n  const priceSummary =\n    data?.totalQuantity ?? 0 ? (\n      <PriceSummary\n        data-testid=\"price-summary\"\n        loading={priceSummaryLoading}\n        heading=\"Order Summary\"\n        total={{\n          price: (\n            <Price amount={data?.total.value} currency={data?.total.currency} />\n          ),\n          estimated: true,\n        }}\n        subTotal={{\n          price: (\n            <Price\n              data-testid=\"subtotal\"\n              amount={data?.subtotal.excludingTax?.value}\n              currency={data?.subtotal.excludingTax?.currency}\n            />\n          ),\n        }}\n        shipping={\n          data?.isVirtual\n            ? undefined\n            : {\n                price:\n                  estimatedShippingPrice?.amount == 0 ? (\n                    <span data-testId=\"free-shipping\">\n                      {dictionary.freeShipping}\n                    </span>\n                  ) : estimatedShippingPrice ? (\n                    <Price {...estimatedShippingPrice} />\n                  ) : (\n                    <span>{dictionary.taxToBeDetermined}</span>\n                  ),\n                estimated: true,\n                countryField: (\n                  <Picker\n                    name=\"shippingCountry\"\n                    placeholder={dictionary.countryField}\n                    value={selectedCountry}\n                    variant=\"primary\"\n                    options={countries}\n                    handleSelect={handleCountrySelected}\n                    data-testid=\"estimate-shipping-country-selector\"\n                  />\n                ),\n                stateField:\n                  regions.length > 0 ? (\n                    <Picker\n                      name=\"shippingState\"\n                      placeholder={dictionary.stateField}\n                      variant=\"primary\"\n                      options={regions}\n                      value={selectedRegion}\n                      data-testid=\"estimate-shipping-state-selector\"\n                      disabled={regionsLoading}\n                    />\n                  ) : (\n                    <Input\n                      aria-label={dictionary.stateField}\n                      name=\"shippingState\"\n                      placeholder={dictionary.stateField}\n                      variant=\"primary\"\n                      value={selectedRegion}\n                      disabled={regionsLoading}\n                      data-testid=\"estimate-shipping-state-input\"\n                      maxLength={50}\n                    />\n                  ),\n                zipField: (\n                  <Input\n                    aria-label={dictionary.zipField}\n                    name=\"shippingZip\"\n                    placeholder={dictionary.zipField}\n                    variant=\"primary\"\n                    data-testid=\"estimate-shipping-zip-input\"\n                    value={selectedZip}\n                    maxLength={12}\n                  />\n                ),\n                estimateButton: (\n                  <Button\n                    variant=\"secondary\"\n                    data-testid=\"estimate-shipping-apply-button\"\n                    aria-label={dictionary.applyButton}\n                  >\n                    {dictionary.applyButton}\n                  </Button>\n                ),\n                destinationText:\n                  estimatedDestinationText || dictionary.taxToBeDetermined,\n                onEstimate: handleEstimateShipping,\n              }\n        }\n        taxTotal={{\n          price: data?.totalTax ? (\n            <Price\n              data-testid=\"tax-total\"\n              amount={data?.totalTax?.value}\n              currency={data?.totalTax?.currency}\n            />\n          ) : (\n            <span data-testid=\"tax-total\">{dictionary.taxToBeDetermined}</span>\n          ),\n          estimated: true,\n        }}\n        primaryAction={\n          routeCheckout ? (\n            <Button\n              data-testid=\"checkout-button\"\n              variant=\"primary\"\n              href={routeCheckout({\n                cartId: data!.id,\n              })}\n            >\n              {dictionary.checkout}\n            </Button>\n          ) : undefined\n        }\n        discounts={data?.appliedDiscounts.map((discount) => {\n          return {\n            label: discount.label,\n            price: (\n              <Price\n                data-testid=\"summary-discount-total\"\n                amount={-discount.amount.value}\n                currency={discount.amount.currency}\n                sale={true}\n              />\n            ),\n          };\n        })}\n      />\n    ) : undefined;\n\n  return (\n    <CartComponent\n      {...props}\n      heading={<div>{dictionary.heading}</div>}\n      emptyCart={<EmptyCart ctaLinkURL={routeEmptyCartCTA?.()} />}\n      priceSummary={priceSummary}\n      products={\n        data?.totalQuantity ?? 0 ? (\n          <CartList>\n            {data?.items.map((item, index) => {\n              const isLoading = itemsLoading.has(item.uid);\n\n              const configurations = {\n                ...(item.selectedOptions ?? {}),\n                ...(item.recipient\n                  ? { [dictionary.recipient]: item.recipient }\n                  : {}),\n                ...(item.recipientEmail && item.recipient\n                  ? {\n                      [dictionary.recipient]: `${item.recipient} (${item.recipientEmail})`,\n                    }\n                  : {}),\n                ...(item.sender ? { [dictionary.sender]: item.sender } : {}),\n                ...(item.senderEmail && item.sender\n                  ? {\n                      [dictionary.sender]: `${item.sender} (${item.senderEmail})`,\n                    }\n                  : {}),\n                ...(item.message ? { [dictionary.message]: item.message } : {}),\n                ...(item.links && item.links.count\n                  ? item.links.count > 1\n                    ? {\n                        [dictionary.files.replace(\n                          '{count}',\n                          item.links.count.toString()\n                        )]: item.links.result,\n                      }\n                    : {\n                        [dictionary.file.replace(\n                          '{count}',\n                          item.links.count.toString()\n                        )]: item.links.result,\n                      }\n                  : {}),\n              };\n\n              return (\n                <CartItem\n                  data-testid=\"cart-item\"\n                  ariaLabel={item.name}\n                  key={item.uid}\n                  updating={isLoading}\n                  image={\n                    routeProduct ? (\n                      <a href={routeProduct(item)}>\n                        <Image\n                          loading={index < 4 ? 'eager' : 'lazy'}\n                          src={item.image.src}\n                          alt={item.image.alt}\n                          width=\"300\"\n                          height=\"300\"\n                          params={{ width: 300 }}\n                        />\n                      </a>\n                    ) : (\n                      <Image\n                        loading={index < 4 ? 'eager' : 'lazy'}\n                        src={item.image.src}\n                        alt={item.image.alt}\n                        width=\"300\"\n                        height=\"300\"\n                        params={{ width: 300 }}\n                      />\n                    )\n                  }\n                  title={\n                    <span>\n                      {routeProduct ? (\n                        <a href={routeProduct(item)}>{item.name}</a>\n                      ) : (\n                        <>{item.name}</>\n                      )}\n                    </span>\n                  }\n                  sku={<span>{item.sku}</span>}\n                  configurations={\n                    Object.keys(configurations).length > 0\n                      ? configurations\n                      : undefined\n                  }\n                  quantity={item.quantity}\n                  price={\n                    <Price\n                      amount={item.regularPrice?.value}\n                      currency={item.regularPrice?.currency}\n                      style={{ font: 'inherit' }}\n                    />\n                  }\n                  total={\n                    <>\n                      <Price\n                        amount={item.total.value}\n                        currency={item.total.currency}\n                        variant={item.discounted ? 'strikethrough' : 'default'}\n                        data-testid=\"regular-total\"\n                        aria-label={dictionary.regularPrice}\n                      />\n\n                      {item.discounted && (\n                        <Price\n                          amount={item.discountedTotal?.value}\n                          currency={item.discountedTotal?.currency}\n                          sale={item.discounted}\n                          data-testid=\"discount-total\"\n                          aria-label={dictionary.discountedPrice}\n                        />\n                      )}\n                    </>\n                  }\n                  onQuantity={(value) => {\n                    handleItemQuantityUpdate(item.uid, value);\n                  }}\n                  onRemove={() => {\n                    handleItemQuantityUpdate(item.uid, 0);\n                  }}\n                />\n              );\n            })}\n          </CartList>\n        ) : undefined\n      }\n    />\n  );\n};\n\nCart.getInitialData = async function () {\n  return getPersistedData();\n};\n"],"names":["Cart","className","children","emptyCart","heading","products","priceSummary","props","_jsx","classes","_jsxs","VComponent","node","Divider","variant","useEstimatedShipping","countries","setCountries","useState","selectedCountry","setSelectedCountry","selectedRegion","setSelectedRegion","selectedZip","setSelectedZip","regions","setRegions","regionsLoading","setRegionsLoading","estimatedShippingPrice","setEstimatedShippingPrice","estimatedDestinationText","setEstimatedDestinationText","priceSummaryLoading","setPriceSummaryLoading","handleEstimateShipping","useCallback","formValues","shippingCountry","shippingState","shippingZip","addressData","countryCode","postcode","region","code","then","data","amount","value","currency","finally","handleCountrySelected","event","preventDefault","target","useEffect","defaultCountry","transformedCountries","map","country","isDefaultCountry","id","text","label","getRegions","transformedRegions","name","loading","initialData","routeProduct","routeEmptyCartCTA","routeCheckout","setData","itemsLoading","setItemLoading","Set","handleItemsLoading","state","uid","prev","add","delete","handleItemQuantityUpdate","quantity","updateProductsFromCart","dictionary","useText","applyButton","checkout","countryField","discountedPrice","download","freeShipping","message","regularPrice","recipient","sender","stateField","taxToBeDetermined","zipField","file","files","events","on","payload","shippingAddress","addresses","shipping","regionCode","zipCode","eager","off","Object","keys","length","locale","totalQuantity","PriceSummary","total","price","Price","estimated","subTotal","subtotal","excludingTax","isVirtual","undefined","Picker","placeholder","options","handleSelect","disabled","Input","maxLength","estimateButton","Button","destinationText","onEstimate","taxTotal","totalTax","primaryAction","href","cartId","discounts","appliedDiscounts","discount","sale","CartComponent","EmptyCart","ctaLinkURL","CartList","items","item","index","isLoading","has","configurations","selectedOptions","recipientEmail","senderEmail","links","count","replace","toString","result","CartItem","ariaLabel","updating","image","Image","src","alt","width","height","params","title","_Fragment","sku","style","font","discounted","discountedTotal","onQuantity","onRemove","getInitialData","getPersistedData"],"mappings":"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"}